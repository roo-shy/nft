{"ast":null,"code":"import _classCallCheck from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"H:\\\\Expermental\\\\nft\\\\src\\\\components\\\\EtherbrightPixelDisplay.js\";\nimport React, { Component } from 'react';\nimport { Animate } from 'react-move'; // import { SvgLoader, SvgProxy } from 'react-svgmt';\n\nimport { interpolate, interpolateTransformSvg } from 'd3-interpolate';\n\nvar EtherbrightPixelDisplay = /*#__PURE__*/function (_Component) {\n  _inherits(EtherbrightPixelDisplay, _Component);\n\n  function EtherbrightPixelDisplay(props) {\n    var _this;\n\n    _classCallCheck(this, EtherbrightPixelDisplay);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EtherbrightPixelDisplay).call(this, props));\n    _this.state = {\n      pixels: props.pixels,\n      pallet: props.pallet,\n      id: props.id,\n      c1: \"#00ff00\",\n      c2: \"#ff00ff\",\n      cnt: 0\n    };\n    return _this;\n  }\n\n  _createClass(EtherbrightPixelDisplay, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //Use React Move to animate the body\n      setInterval(function () {\n        _this2.setState(_this2.changecolor);\n      }, 1000);\n    }\n  }, {\n    key: \"changecolor\",\n    value: function changecolor(prevState) {\n      // console.log(\"JUMP \",this.state.c1);\n      return {\n        c1: this.state.pallet[this.state.cnt % 6],\n        cnt: prevState.cnt + 1\n      };\n    }\n  }, {\n    key: \"getCircle\",\n    value: function getCircle(n, x, y, c) {\n      return React.createElement(\"circle\", {\n        key: n,\n        id: this.state.id.toHexString(),\n        pn: n,\n        cx: x,\n        cy: y,\n        r: \"20\",\n        fill: c,\n        strokeWidth: \"8\",\n        stroke: \"black\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"getSVG\",\n    value: function getSVG() {\n      var _this3 = this;\n\n      return React.createElement(\"svg\", {\n        width: \"300\",\n        height: \"300\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, this.state.pixels.map(function (pix) {\n        return _this3.getCircle(pix.id, pix.xpos, pix.ypos, pix.color);\n      }));\n    }\n  }, {\n    key: \"animatedSVG\",\n    value: function animatedSVG() {\n      // console.log(\"animate \",this.state.c1);\n      // return(\n      //       <svg width=\"300\" height=\"300\">\n      //            <circle cx=\"50\" cy=\"50\" r=\"20\" fill={this.state.c1} strokeWidth='8' stroke='black' />}\t          \n      //       </svg>\n      // )\n      return React.createElement(\"svg\", {\n        width: \"300\",\n        height: \"300\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(Animate, {\n        start: {\n          c: this.state.c1\n        },\n        enter: {\n          c: this.state.c1\n        },\n        update: {\n          c: this.state.c1\n        },\n        duration: 0,\n        delay: 100000,\n        easing: \"expOut\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, function (data) {\n        {\n          /*console.log(\"DATA \",data.c);*/\n        }\n        return React.createElement(\"circle\", {\n          cx: \"50\",\n          cy: \"50\",\n          r: \"20\",\n          fill: data.c,\n          strokeWidth: \"8\",\n          stroke: \"black\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        });\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return (// this.getSVG()\n        this.animatedSVG()\n      );\n    }\n  }]);\n\n  return EtherbrightPixelDisplay;\n}(Component);\n\nexport { EtherbrightPixelDisplay as default };","map":{"version":3,"sources":["H:/Expermental/nft/src/components/EtherbrightPixelDisplay.js"],"names":["React","Component","Animate","interpolate","interpolateTransformSvg","EtherbrightPixelDisplay","props","state","pixels","pallet","id","c1","c2","cnt","setInterval","setState","changecolor","prevState","n","x","y","c","toHexString","map","pix","getCircle","xpos","ypos","color","data","animatedSVG"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,YAAxB,C,CACA;;AACA,SAASC,WAAT,EAAsBC,uBAAtB,QAAqD,gBAArD;;IAEqBC,uB;;;AACpB,mCAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACjB,iGAAMA,KAAN;AACA,UAAKC,KAAL,GAAW;AACXC,MAAAA,MAAM,EAAEF,KAAK,CAACE,MADH;AAEXC,MAAAA,MAAM,EAAEH,KAAK,CAACG,MAFH;AAGXC,MAAAA,EAAE,EAACJ,KAAK,CAACI,EAHE;AAIXC,MAAAA,EAAE,EAAC,SAJQ;AAKXC,MAAAA,EAAE,EAAC,SALQ;AAMXC,MAAAA,GAAG,EAAC;AANO,KAAX;AAFiB;AAUjB;;;;wCACmB;AAAA;;AACjB;AACCC,MAAAA,WAAW,CAAC,YAAM;AAChB,QAAA,MAAI,CAACC,QAAL,CAAc,MAAI,CAACC,WAAnB;AACD,OAFU,EAER,IAFQ,CAAX;AAGH;;;gCACWC,S,EAAU;AACrB;AACA,aAAM;AAACN,QAAAA,EAAE,EAAC,KAAKJ,KAAL,CAAWE,MAAX,CAAkB,KAAKF,KAAL,CAAWM,GAAX,GAAe,CAAjC,CAAJ;AAAyCA,QAAAA,GAAG,EAACI,SAAS,CAACJ,GAAV,GAAc;AAA3D,OAAN;AAEA;;;8BAESK,C,EAAEC,C,EAAEC,C,EAAEC,C,EAAE;AAEd,aACE;AAAQ,QAAA,GAAG,EAAEH,CAAb;AAAgB,QAAA,EAAE,EAAE,KAAKX,KAAL,CAAWG,EAAX,CAAcY,WAAd,EAApB;AAAiD,QAAA,EAAE,EAAEJ,CAArD;AAAwD,QAAA,EAAE,EAAEC,CAA5D;AAA+D,QAAA,EAAE,EAAEC,CAAnE;AAAsE,QAAA,CAAC,EAAC,IAAxE;AAA6E,QAAA,IAAI,EAAEC,CAAnF;AAAsF,QAAA,WAAW,EAAC,GAAlG;AAAsG,QAAA,MAAM,EAAC,OAA7G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGH;;;6BACQ;AAAA;;AACN,aACD;AAAK,QAAA,KAAK,EAAC,KAAX;AAAiB,QAAA,MAAM,EAAC,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACS,KAAKd,KAAL,CAAWC,MAAX,CAAkBe,GAAlB,CAAsB,UAAAC,GAAG;AAAA,eAAG,MAAI,CAACC,SAAL,CAAeD,GAAG,CAACd,EAAnB,EAAuBc,GAAG,CAACE,IAA3B,EAAiCF,GAAG,CAACG,IAArC,EAA2CH,GAAG,CAACI,KAA/C,CAAH;AAAA,OAAzB,CADT,CADC;AAKD;;;kCACY;AACV;AACF;AACA;AAEA;AACA;AACA;AACA,aACM;AAAK,QAAA,KAAK,EAAC,KAAX;AAAiB,QAAA,MAAM,EAAC,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,OAAD;AACE,QAAA,KAAK,EAAE;AAAEP,UAAAA,CAAC,EAAE,KAAKd,KAAL,CAAWI;AAAhB,SADT;AAEE,QAAA,KAAK,EAAE;AAAEU,UAAAA,CAAC,EAAE,KAAKd,KAAL,CAAWI;AAAhB,SAFT;AAGE,QAAA,MAAM,EAAE;AAAEU,UAAAA,CAAC,EAAE,KAAKd,KAAL,CAAWI;AAAhB,SAHV;AAIE,QAAA,QAAQ,EAAE,CAJZ;AAKE,QAAA,KAAK,EAAE,MALT;AAMC,QAAA,MAAM,EAAC,QANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQG,UAACkB,IAAD,EAAU;AACV;AAAC;AAAiC;AAClC,eACA;AAAQ,UAAA,EAAE,EAAC,IAAX;AAAgB,UAAA,EAAE,EAAC,IAAnB;AAAwB,UAAA,CAAC,EAAC,IAA1B;AAA+B,UAAA,IAAI,EAAEA,IAAI,CAACR,CAA1C;AAA6C,UAAA,WAAW,EAAC,GAAzD;AAA6D,UAAA,MAAM,EAAC,OAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAGC,OAbJ,CADF,CADN;AAqBA;;;6BAEM;AACP,aACC;AACA,aAAKS,WAAL;AAFD;AAIA;;;;EAzEmD7B,S;;SAAhCI,uB","sourcesContent":["import React, { Component } from 'react';\r\nimport { Animate } from 'react-move';\r\n// import { SvgLoader, SvgProxy } from 'react-svgmt';\r\nimport { interpolate, interpolateTransformSvg } from 'd3-interpolate'\r\n\r\nexport default class EtherbrightPixelDisplay extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\tpixels: props.pixels,\r\n\t\tpallet: props.pallet,\r\n\t\tid:props.id,\r\n\t\tc1:\"#00ff00\",\r\n\t\tc2:\"#ff00ff\",\r\n\t\tcnt:0,\r\n\t\t};\r\n\t}\r\n\tcomponentDidMount() {\r\n    //Use React Move to animate the body\r\n\t    setInterval(() => {\r\n\t      this.setState(this.changecolor);\r\n\t    }, 1000);\r\n\t}\r\n\tchangecolor(prevState){\r\n\t\t// console.log(\"JUMP \",this.state.c1);\r\n\t\treturn{c1:this.state.pallet[this.state.cnt%6], cnt:prevState.cnt+1};\r\n\r\n\t}\r\n\r\n\tgetCircle(n,x,y,c){\r\n\r\n\t    return(\r\n\t      <circle key={n} id={this.state.id.toHexString()} pn={n} cx={x} cy={y} r='20' fill={c} strokeWidth='8' stroke='black' />\r\n\t    )\r\n\t}\r\n\t getSVG(){\r\n  \t\treturn(\r\n\t\t\t<svg width='300' height='300'>\r\n\t          {this.state.pixels.map(pix=>(this.getCircle(pix.id, pix.xpos, pix.ypos, pix.color) ))}\r\n\t        </svg>\r\n        )\r\n\t }\r\n\t animatedSVG(){\r\n\t \t\t\t// console.log(\"animate \",this.state.c1);\r\n\t \t// return(\r\n\t  //       <svg width=\"300\" height=\"300\">\r\n\t         \r\n\t  //            <circle cx=\"50\" cy=\"50\" r=\"20\" fill={this.state.c1} strokeWidth='8' stroke='black' />}\t          \r\n\t  //       </svg>\r\n \t\t// )\r\n\t \treturn(\r\n\t        <svg width=\"300\" height=\"300\">\r\n\t          <Animate\r\n\t            start={{ c: this.state.c1 }}\r\n\t            enter={{ c: this.state.c1 }}\r\n\t            update={{ c: this.state.c1 }}\r\n\t            duration={0}\r\n\t            delay={100000}\r\n            easing=\"expOut\"\r\n\t          >\r\n\t            {(data) => {\r\n\t            \t{/*console.log(\"DATA \",data.c);*/}\r\n\t            \treturn(\r\n\t            \t<circle cx=\"50\" cy=\"50\" r=\"20\" fill={data.c} strokeWidth='8' stroke='black' />\r\n\t            \t)\r\n\t            \t}\r\n\t        \t}\r\n\r\n\t          </Animate>\r\n\t        </svg>\r\n \t\t)\r\n\t }\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t// this.getSVG()\r\n\t\t\tthis.animatedSVG()\r\n\t    )\r\n\t}\r\n\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module"}