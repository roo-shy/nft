{"ast":null,"code":"import _regeneratorRuntime from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"H:\\\\Expermental\\\\nft\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react'; // import { ReactSVG } from 'react-svg'\n// import logo from '../logo.png';\n\nimport './App.css';\nimport Web3 from 'web3';\nimport Color from '../abis/Color.json';\nimport { CirclePicker } from 'react-color';\n\nfunction Etherbright(id, svg, mode, showSvg) {\n  this.id = id;\n  this.svg = svg;\n  this.showSvg;\n  this.mode = 0;\n} // function  svgonclick(e,id){\n//   console.log(\"Color \",e.target.getAttributeNS(null,\"fill\"));\n//   console.log(\"ID \",e.target.getAttributeNS(null,\"id\"));\n//   window.App.setEtherbrightPixelColor(e.target.getAttributeNS(null,\"id\"),0,0);\n// };\n\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.mint = function (color) {\n      _this.state.contract.methods.mint(color).send({\n        from: _this.state.account,\n        gas: 3000000\n      }) //gas must be set with each call for Ganche-cli\n      .on('receipt', function (receipt) {\n        // console.log(\"got mints receipt\")\n        _this.setState({\n          colors: [].concat(_toConsumableArray(_this.state.colors), [color])\n        });\n      });\n    };\n\n    _this.mintEtherbright = function () {\n      _this.state.contract.methods.mintEtherbright(_this.state.account).send({\n        from: _this.state.account,\n        gas: 3000000\n      });\n    };\n\n    _this.setPixelColor = function (n, color) {\n      _this.state.contract.methods.setPixel(n, color).send({\n        from: _this.state.account,\n        gas: 3000000\n      });\n    };\n\n    _this.setEtherbrightPixelColor = function (id, pixn, paln) {\n      _this.state.contract.methods.setEtherbrightPixel(id, pixn, paln).send({\n        from: _this.state.account,\n        gas: 3000000\n      });\n    };\n\n    _this.testsvgonclick = function (e, id) {\n      console.log(\"Color \", e.target.getAttributeNS(null, \"fill\"));\n      console.log(\"ID \", e.target.getAttributeNS(null, \"id\")); // window.App.setEtherbrightPixelColor(e.target.getAttributeNS(null,\"id\"),0,0)\n    };\n\n    _this.getAllTokenId = function () {\n      // var nTokens=this.state.contract.methods.totalSupply().call();\n      // for (var i = 0; i <nTokens; i++) {\n      //   console.log(\"getalldis \",i)\n      // }\n      _this.state.contract.methods.totalSupply().call().then(function (totalSupply) {\n        console.log(\"Total Supply with a promise:\", totalSupply);\n      });\n    };\n\n    _this.update = function () {\n      _this.forceUpdate();\n\n      console.log(_this.state.etherbrights);\n    };\n\n    _this.state = {\n      account: '',\n      contract: null,\n      totalSupply: 1,\n      svg: '',\n      colors: [],\n      etherbrights: [],\n      etherbrightIDs: [],\n      allSVGs: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(\"loadWeb3\");\n\n                if (!window.ethereum) {\n                  _context.next = 8;\n                  break;\n                }\n\n                console.log(\"loadWeb3  ETH\"); // window.web3 = new Web3(window.ethereum)\n\n                window.web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8545'));\n                _context.next = 6;\n                return window.ethereum.enable();\n\n              case 6:\n                _context.next = 9;\n                break;\n\n              case 8:\n                if (window.web3) {\n                  console.log(\"loadWeb3  WEB3\"); // window.web3 = new Web3(window.web3.currentProvider)\n\n                  window.web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8545'));\n                } else {\n                  window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n                }\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                console.log(\"loadingWeb3\");\n                _context2.next = 3;\n                return this.loadWeb3();\n\n              case 3:\n                console.log(\"loadBlockchainData\");\n                _context2.next = 6;\n                return this.loadBlockchainData();\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        var web3, accounts, networkId, networkData, abi, address, returnContract, returntotalSupply, i, ethbID, ethbSVG;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3; // Load account\n\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                //gets accout from metamask\n                this.setState({\n                  account: accounts[0]\n                }); //state store property values of a componet and when the state chages the componet re-renders\n\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                //detercts the eth network \n                networkData = Color.networks[networkId]; //gets the contracts address on the network\n\n                console.log(\"netowrkdata\", networkId);\n\n                if (!networkData) {\n                  _context3.next = 45;\n                  break;\n                }\n\n                //if it has an addres\n                abi = Color.abi; //creates a JS version of the contract with its abi\n\n                address = networkData.address; //its actual address?\n\n                console.log(\"networkData:\", networkData);\n                console.log(\"addy\", address);\n                console.log(\"abi:\", abi);\n                returnContract = new web3.eth.Contract(abi, address); //creates a new version of this contract\n\n                this.setState({\n                  contract: returnContract\n                }); //sets it in state obj\n\n                console.log(\"contract:\", this.state.contract); // console.log(\"calling test return\")\n                // const testreturn=returnContract.methods.testReturn(\"this is a test\").call({from: this.state.account})\n                // console.log(\"testreturn \",testreturn)\n\n                console.log(\"calling totalssupply\");\n                _context3.next = 22;\n                return returnContract.methods.totalSupply().call();\n\n              case 22:\n                returntotalSupply = _context3.sent;\n                //calls a contracts method\n                console.log(\"returntotalsupply\", returntotalSupply.toString());\n                console.log(\"state total supply\", this.state.totalSupply);\n                this.setState({\n                  totalSupply: returntotalSupply\n                }); //sets state var\n                // var returnSVG = await returnContract.methods.generateSVG().call()\n                // this.setState({svg:returnSVG})\n                // const tmp=\"<svg><circle cx=\"50\" cy=\"50\" r=\"20\" fill=\"#ff0000\" stroke-width=\"9\" stroke=\"black\"/></svg>\"\n                // this.setState({svg:\"<svg width='100' height='100'><circle cx='50' cy='50' r='20' fill='#ffff00' stroke-width='9' stroke='black'/></svg>\"})\n                // console.log(\"SVG: \",this.state.svg)\n                // returnContract.events.SVGgenerated()\n                // .on('data', (event) => {\n                //   console.log(\"SVG EVENT \",event);\n                //   this.setState({svg:event.returnValues[0]})\n                // })\n                // .on('error', console.error)\n\n                returnContract.events.EtherbrightSVGgenerated().on('data', function (event) {\n                  console.log(\"ETHB SVG EVENT \", event); // this.setState({svg:event.returnValues[0]})\n                }).on('error', console.error);\n                returnContract.events.EtherbrightPixelChanged().on('data', function (event) {\n                  console.log(\"ETHB PIXEL CHANGED EVENT \", event); // returnContract.methods.generateEtherbrightsSVG(event.returnValues[0]).call()\n                  //   .then(function(result){console.log(result)})\n\n                  for (var index = 0; index < _this2.state.etherbrights.length; index++) {\n                    console.log(\"index \", index);\n                    console.log(\"state ID \", _this2.state.etherbrights[index].id.toHexString());\n                    console.log(\"event id \", event.returnValues[0].toHexString());\n\n                    if (_this2.state.etherbrights[index].id.toHexString() === event.returnValues[0].toHexString()) {\n                      console.log(\"THIS IS IT\");\n                      break;\n                    }\n                  }\n\n                  var _etherbrights = Object.assign(_this2.state.etherbrights);\n\n                  var tmp; // _etherbrights[index].svg=\"<svg width='100' height='100'><circle cx='50' cy='50' r='20' fill='#ffff00' strokeWidth='9' stroke='black'/></svg>\";\n                  // _etherbrights[index].svg=returnContract.methods.generateEtherbrightsSVG(event.returnValues[0]).call().then(function(result){tmp=result;console.log(result)} );\n\n                  _etherbrights[index].svg = event.returnValues[1];\n                  console.log(\"tmp result \", tmp);\n\n                  _this2.setState({\n                    etherbrights: []\n                  });\n\n                  _this2.setState({\n                    etherbrights: _etherbrights\n                  }); // this.setMethod(_etherbrights);\n                  // this.state.etherbrights.map(ethb =>{\n                  //   if(ethb.id=event.returnValues[0]){\n                  //     // console.log(\"THIS IS IT\", index);\n                  //     var returnSVG =  returnContract.methods.generateEtherbrightsSVG(event.returnValues[0]).call()\n                  //     // this.setState()\n                  //     // let tmparray=this.state.etherbrights.slice();\n                  //     // tmparray[id][svg]=returnSVG;\n                  //     // setarray(tmparray);\n                  //   }\n                  //   }\n                  //   )\n\n                }).on('error', console.error); // returnContract.events.PixelChanged()\n                // .on('data', (event) => {\n                //   console.log(\"PIXEL CHANGED EVENT \",event.returnValues[0]);\n                // })\n                // .on('error', console.error)\n\n                returnContract.events.EtherbrightMinted().on('data', function (event) {\n                  console.log(\"Etherbright Minted \", event);\n                  var ethb = new Etherbright(event.returnValues[0], event.returnValues[1]);\n\n                  _this2.setState({\n                    etherbrights: [].concat(_toConsumableArray(_this2.state.etherbrights), [ethb])\n                  });\n                }).on('error', console.error);\n                returnContract.events.Transfer().on('data', function (event) {\n                  console.log(\"GOT EVENT\");\n                  console.log(event);\n                }).on('error', console.error); // returnContract.getPastEvents('PixelChanged', {\n                //     fromBlock: 0,\n                //     toBlock: 'latest'\n                // }, function(error, events){ console.log(events); })\n                // .then(function(events){\n                //     console.log(events) // same results as the optional callback above\n                // });\n                // returnContract.getPastEvents('SVGgenerated', {\n                //     fromBlock: 0,\n                //     toBlock: 'latest'\n                // }, function(error, events){ \n                //     console.log(events); \n                //     // returnSVG= returnContract.methods.generateSVG().call();\n                //     // this.setState({svg:returnSVG});\n                //    })\n                // .then(function(events){\n                //     console.log(events) // same results as the optional callback above\n                // });\n                // Load Colors\n                // for (var i = 1; i <= returntotalSupply; i++) {\n                //   const color = await returnContract.methods.colors(i - 1).call()\n                //   this.setState({\n                //     colors: [...this.state.colors, color]\n                //   })\n                // }\n                // var _svgmap = new Map();\n\n                i = 1;\n\n              case 31:\n                if (!(i <= returntotalSupply)) {\n                  _context3.next = 42;\n                  break;\n                }\n\n                _context3.next = 34;\n                return returnContract.methods.tokenByIndex(i - 1).call();\n\n              case 34:\n                ethbID = _context3.sent;\n                _context3.next = 37;\n                return returnContract.methods.generateEtherbrightsSVG(ethbID).call();\n\n              case 37:\n                ethbSVG = _context3.sent;\n                // console.log(\"svgs: \",returnedSVG)\n                // this.setState({\n                //   allSVGs:[...this.state.allSVGs,returnedSVG]\n                // })\n                // console.log(this.state.allSVGs)\n                // _svgmap.set(ethbID,ethbSVG);\n                this.setState({\n                  etherbrights: [].concat(_toConsumableArray(this.state.etherbrights), [new Etherbright(ethbID, ethbSVG, 0, ethbSVG)])\n                });\n\n              case 39:\n                i++;\n                _context3.next = 31;\n                break;\n\n              case 42:\n                // this.setState({SVGmap:_svgmap})\n                console.log(\"allsvgs\", this.state.allSVGs); // console.log(\"MAP\", this.state.svgmap)\n\n                _context3.next = 46;\n                break;\n\n              case 45:\n                window.alert('Smart contract not deployed to detected network.');\n\n              case 46:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }() //javascript arrow function =>\n    // () define the list of pramaters followed by \"fat arrow\" => and {} that delimit the functions body\n    // ... is spread syntax which expands an iterable like an array or string \n    //\n    // this callwebs the mint method in the contract with seend passing the accout\n    // .once is a promiss event that watches for events like'receipt' and then can call a function with it\n    // when we get a receipt event we call setstate and add the color we justed mined to the list\n    // //#dc34eb\n    //   mint = (color) => {\n    //     this.state.contract.methods\n    //         // this.state.contract\n    //     .mint(color)\n    //     .send({ from: this.state.account })\n    //     .once('receipt',\n    //        (receipt) => {\n    //           this.setState(\n    //             {\n    //             colors: [...this.state.colors, color]\n    //             }\n    //           )\n    //         }\n    //     )\n    //   }\n\n  }, {\n    key: \"setMethod\",\n    value: function setMethod(newstate) {\n      var _etherbrights = Object.assign(this.state.etherbrights);\n\n      _etherbrights[1].svg = \"<svg width='100' height='100'><circle cx='50' cy='50' r='20' fill='#ffff00' strokeWidth='9' stroke='black'/></svg>\";\n      console.log(\"SETSTAT\", _etherbrights);\n      this.setState({\n        etherbrights: []\n      });\n      this.setState({\n        etherbrights: _etherbrights\n      }); // this.setState(this.state);\n\n      console.log(\"SET METHOD\");\n    }\n  }, {\n    key: \"render\",\n    // mint = (color) => {\n    //   this.state.contract.mint(color)\n    //   .call({from: this.state.account})\n    //   .once('receipt',\n    //      (receipt) => {\n    //         this.setState(\n    //           {\n    //           colors: [...this.state.colors, color]\n    //           }\n    //         )\n    //       }\n    //   )\n    // }\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"navbar-brand col-sm-3 col-md-2 mr-0\",\n        href: \"http://www.TheEverbright.com\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        },\n        __self: this\n      }, \"Etherbright\"), React.createElement(\"ul\", {\n        className: \"navbar-nav px-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: \"nav-item text-nowrap d-none d-sm-none d-sm-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        className: \"text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        id: \"account\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377\n        },\n        __self: this\n      }, this.state.account))))), React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382\n        },\n        __self: this\n      }, React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 d-flex text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385\n        },\n        __self: this\n      }, \"setPixelColor\"), React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          event.preventDefault();\n          var color = _this3.color.value;\n          var n = _this3.n.value;\n\n          _this3.setPixelColor(n, color);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control mb-1\",\n        placeholder: \"e.g. #FFFFFF\",\n        ref: function ref(input) {\n          _this3.color = input;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control mb-1\",\n        placeholder: \"pixel number\",\n        ref: function ref(input) {\n          _this3.n = input;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        className: \"btn btn-block btn-primary\",\n        value: \"SET PIXEL COLOR\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404\n        },\n        __self: this\n      }))))), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.mintEtherbright,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414\n        },\n        __self: this\n      }, \"mint etherbright\"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.getAllTokenId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416\n        },\n        __self: this\n      }, \"get all token ID\"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.update,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418\n        },\n        __self: this\n      }, \"update\"), React.createElement(\"div\", {\n        className: \"row text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 438\n        },\n        __self: this\n      }, this.state.etherbrights.map(function (ethb) {\n        return React.createElement(\"div\", {\n          id: \"parent\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 443\n          },\n          __self: this\n        }, React.createElement(\"hr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 444\n          },\n          __self: this\n        }), React.createElement(EthbDisplay, {\n          id: ethb.id,\n          svg: ethb.svg,\n          setmethod: function setmethod(id, pixn, paln) {\n            return _this3.setEtherbrightPixelColor(id, pixn, paln);\n          },\n          testsvg: function testsvg(e, id) {\n            return _this3.testsvgonclick(e, id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 445\n          },\n          __self: this\n        }));\n      })))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nvar EthbDisplay = /*#__PURE__*/function (_Component2) {\n  _inherits(EthbDisplay, _Component2);\n\n  function EthbDisplay(props) {\n    var _this4;\n\n    _classCallCheck(this, EthbDisplay);\n\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(EthbDisplay).call(this, props)); // this.testsvgonclick=this.testsvgonclick.bind(this);\n\n    _this4.state = {\n      id: props.id,\n      svg: props.svg\n    };\n    return _this4;\n  }\n\n  _createClass(EthbDisplay, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(newProps) {\n      this.setState({\n        location: newProps.location\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 486\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 487\n        },\n        __self: this\n      }, \"ETHBDISPLAY\"), React.createElement(\"div\", {\n        dangerouslySetInnerHTML: {\n          __html: this.state.svg\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 488\n        },\n        __self: this\n      }), \"Etherbright id: \", this.state.id.toHexString(), React.createElement(\"svg\", {\n        width: \"100\",\n        height: \"100\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 492\n        },\n        __self: this\n      }, React.createElement(\"circle\", {\n        id: this.state.id.toHexString(),\n        cx: \"50\",\n        cy: \"50\",\n        r: \"20\",\n        fill: \"#ffff00\",\n        strokeWidth: \"9\",\n        stroke: \"black\",\n        onClick: function onClick(e) {\n          _this5.props.testsvg(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 493\n        },\n        __self: this\n      })), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 495\n        },\n        __self: this\n      }, \"setPixelColor\"), React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          event.preventDefault();\n          var paln = _this5.paln.value;\n          var pixn = _this5.pixn.value;\n          var id = _this5.state.id;\n\n          _this5.props.setmethod(_this5.state.id, pixn, paln);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 496\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control mb-1\",\n        placeholder: \"pixel number\",\n        ref: function ref(input) {\n          _this5.pixn = input;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 503\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control mb-1\",\n        placeholder: \"pallent n\",\n        ref: function ref(input) {\n          _this5.paln = input;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 509\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        className: \"btn btn-block btn-primary\",\n        value: \"SET PIXEL COLOR\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 515\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        className: \"button\",\n        onClick: function onClick() {\n          return alert(_this5.state.id);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 521\n        },\n        __self: this\n      }), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 523\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return EthbDisplay;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["H:/Expermental/nft/src/components/App.js"],"names":["React","Component","Web3","Color","CirclePicker","Etherbright","id","svg","mode","showSvg","App","props","mint","color","state","contract","methods","send","from","account","gas","on","receipt","setState","colors","mintEtherbright","setPixelColor","n","setPixel","setEtherbrightPixelColor","pixn","paln","setEtherbrightPixel","testsvgonclick","e","console","log","target","getAttributeNS","getAllTokenId","totalSupply","call","then","update","forceUpdate","etherbrights","etherbrightIDs","allSVGs","window","ethereum","web3","providers","WebsocketProvider","enable","alert","loadWeb3","loadBlockchainData","eth","getAccounts","accounts","net","getId","networkId","networkData","networks","abi","address","returnContract","Contract","returntotalSupply","toString","events","EtherbrightSVGgenerated","event","error","EtherbrightPixelChanged","index","length","toHexString","returnValues","_etherbrights","Object","assign","tmp","EtherbrightMinted","ethb","Transfer","i","tokenByIndex","ethbID","generateEtherbrightsSVG","ethbSVG","newstate","preventDefault","value","input","map","EthbDisplay","newProps","location","__html","testsvg","setmethod"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n// import { ReactSVG } from 'react-svg'\r\n// import logo from '../logo.png';\r\nimport './App.css';\r\nimport Web3 from 'web3';\r\nimport Color from '../abis/Color.json'\r\nimport { CirclePicker } from 'react-color';\r\n\r\n\r\nfunction Etherbright(id, svg, mode, showSvg ){\r\n  this.id=id;\r\n  this.svg=svg;\r\n  this.showSvg;\r\n  this.mode=0;\r\n\r\n}\r\n\r\n    \r\n// function  svgonclick(e,id){\r\n//   console.log(\"Color \",e.target.getAttributeNS(null,\"fill\"));\r\n//   console.log(\"ID \",e.target.getAttributeNS(null,\"id\"));\r\n//   window.App.setEtherbrightPixelColor(e.target.getAttributeNS(null,\"id\"),0,0);\r\n\r\n// };\r\n\r\n\r\n  \r\n\r\nclass App extends Component {\r\n\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state={\r\n      account:'',\r\n      contract: null,\r\n      totalSupply: 1,\r\n      svg:'', \r\n      colors: [],\r\n      etherbrights: [],\r\n      etherbrightIDs: [],\r\n      allSVGs: [],\r\n\r\n    }\r\n  }\r\n\r\n  async loadWeb3() {\r\n      console.log(\"loadWeb3\");\r\n\r\n    if (window.ethereum) {\r\n            console.log(\"loadWeb3  ETH\");\r\n\r\n      // window.web3 = new Web3(window.ethereum)\r\n            window.web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8545'))\r\n\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n                  console.log(\"loadWeb3  WEB3\");\r\n\r\n      // window.web3 = new Web3(window.web3.currentProvider)\r\n      window.web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8545'))\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n  }\r\n\r\n  async componentWillMount() {\r\n    console.log(\"loadingWeb3\")\r\n    await this.loadWeb3()\r\n    console.log(\"loadBlockchainData\")\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts() //gets accout from metamask\r\n    this.setState({ account: accounts[0] })//state store property values of a componet and when the state chages the componet re-renders\r\n    const networkId = await web3.eth.net.getId() //detercts the eth network \r\n    const networkData = Color.networks[networkId] //gets the contracts address on the network\r\n    console.log(\"netowrkdata\",networkId)\r\n    if(networkData) {//if it has an addres\r\n      const abi = Color.abi //creates a JS version of the contract with its abi\r\n      const address = networkData.address //its actual address?\r\n      console.log(\"networkData:\",networkData);\r\n      console.log(\"addy\",address);\r\n      console.log(\"abi:\",abi);\r\n\r\n      const returnContract = new web3.eth.Contract(abi, address)//creates a new version of this contract\r\n      this.setState({ contract:returnContract })//sets it in state obj\r\n      console.log(\"contract:\",this.state.contract)\r\n      // console.log(\"calling test return\")\r\n      // const testreturn=returnContract.methods.testReturn(\"this is a test\").call({from: this.state.account})\r\n      // console.log(\"testreturn \",testreturn)\r\n      console.log(\"calling totalssupply\")\r\n      const returntotalSupply = await returnContract.methods.totalSupply().call()//calls a contracts method\r\n      console.log(\"returntotalsupply\",returntotalSupply.toString())\r\n      console.log(\"state total supply\",this.state.totalSupply)\r\n      this.setState({ totalSupply:returntotalSupply }) //sets state var\r\n      // var returnSVG = await returnContract.methods.generateSVG().call()\r\n      // this.setState({svg:returnSVG})\r\n      // const tmp=\"<svg><circle cx=\"50\" cy=\"50\" r=\"20\" fill=\"#ff0000\" stroke-width=\"9\" stroke=\"black\"/></svg>\"\r\n\r\n      // this.setState({svg:\"<svg width='100' height='100'><circle cx='50' cy='50' r='20' fill='#ffff00' stroke-width='9' stroke='black'/></svg>\"})\r\n      // console.log(\"SVG: \",this.state.svg)\r\n\r\n\r\n      // returnContract.events.SVGgenerated()\r\n      // .on('data', (event) => {\r\n      //   console.log(\"SVG EVENT \",event);\r\n      //   this.setState({svg:event.returnValues[0]})\r\n      // })\r\n      // .on('error', console.error)\r\n\r\n      returnContract.events.EtherbrightSVGgenerated()\r\n      .on('data', (event) => {\r\n        console.log(\"ETHB SVG EVENT \",event);\r\n        // this.setState({svg:event.returnValues[0]})\r\n      })\r\n      .on('error', console.error)\r\n\r\n      returnContract.events.EtherbrightPixelChanged()\r\n      .on('data', (event) => {\r\n        console.log(\"ETHB PIXEL CHANGED EVENT \",event);\r\n          // returnContract.methods.generateEtherbrightsSVG(event.returnValues[0]).call()\r\n          //   .then(function(result){console.log(result)})\r\n\r\n        for (var index = 0; index < this.state.etherbrights.length; index++) {\r\n          console.log(\"index \",index);\r\n          console.log(\"state ID \",this.state.etherbrights[index].id.toHexString());\r\n          console.log(\"event id \",event.returnValues[0].toHexString());\r\n\r\n          if (this.state.etherbrights[index].id.toHexString() === event.returnValues[0].toHexString()) {\r\n            console.log(\"THIS IS IT\")\r\n            break;\r\n          }\r\n        }\r\n\r\n        var _etherbrights = Object.assign(this.state.etherbrights);\r\n        var tmp;\r\n        // _etherbrights[index].svg=\"<svg width='100' height='100'><circle cx='50' cy='50' r='20' fill='#ffff00' strokeWidth='9' stroke='black'/></svg>\";\r\n        // _etherbrights[index].svg=returnContract.methods.generateEtherbrightsSVG(event.returnValues[0]).call().then(function(result){tmp=result;console.log(result)} );\r\n        _etherbrights[index].svg=event.returnValues[1]\r\n\r\n        console.log(\"tmp result \",tmp );\r\n        this.setState({etherbrights  :[] });\r\n          this.setState({etherbrights:_etherbrights });\r\n\r\n              // this.setMethod(_etherbrights);\r\n\r\n\r\n\r\n        // this.state.etherbrights.map(ethb =>{\r\n        //   if(ethb.id=event.returnValues[0]){\r\n\r\n        //     // console.log(\"THIS IS IT\", index);\r\n        //     var returnSVG =  returnContract.methods.generateEtherbrightsSVG(event.returnValues[0]).call()\r\n        //     // this.setState()\r\n        //     // let tmparray=this.state.etherbrights.slice();\r\n        //     // tmparray[id][svg]=returnSVG;\r\n        //     // setarray(tmparray);\r\n\r\n        //   }\r\n\r\n        //   }\r\n        //   )\r\n\r\n      })\r\n      .on('error', console.error)\r\n\r\n      // returnContract.events.PixelChanged()\r\n      // .on('data', (event) => {\r\n      //   console.log(\"PIXEL CHANGED EVENT \",event.returnValues[0]);\r\n\r\n      // })\r\n      // .on('error', console.error)\r\n\r\n      returnContract.events.EtherbrightMinted()\r\n      .on('data', (event) => {\r\n        console.log(\"Etherbright Minted \",event);\r\n          var ethb=new Etherbright(event.returnValues[0],event.returnValues[1]);\r\n        this.setState({\r\n          etherbrights: [...this.state.etherbrights, ethb]\r\n        })\r\n      })\r\n      .on('error', console.error)\r\n\r\n      returnContract.events.Transfer()\r\n      .on('data', (event) =>{console.log(\"GOT EVENT\");console.log(event);})\r\n      .on('error',console.error);\r\n\r\n      // returnContract.getPastEvents('PixelChanged', {\r\n      //     fromBlock: 0,\r\n      //     toBlock: 'latest'\r\n      // }, function(error, events){ console.log(events); })\r\n      // .then(function(events){\r\n      //     console.log(events) // same results as the optional callback above\r\n      // });\r\n\r\n\r\n      // returnContract.getPastEvents('SVGgenerated', {\r\n      //     fromBlock: 0,\r\n      //     toBlock: 'latest'\r\n      // }, function(error, events){ \r\n      //     console.log(events); \r\n      //     // returnSVG= returnContract.methods.generateSVG().call();\r\n      //     // this.setState({svg:returnSVG});\r\n\r\n      //    })\r\n      // .then(function(events){\r\n      //     console.log(events) // same results as the optional callback above\r\n      // });\r\n\r\n\r\n\r\n      // Load Colors\r\n      // for (var i = 1; i <= returntotalSupply; i++) {\r\n      //   const color = await returnContract.methods.colors(i - 1).call()\r\n      //   this.setState({\r\n      //     colors: [...this.state.colors, color]\r\n      //   })\r\n      // }\r\n      // var _svgmap = new Map();\r\n      for (var i = 1; i <= returntotalSupply; i++) {\r\n\r\n        var ethbID = await returnContract.methods.tokenByIndex(i - 1).call()\r\n        // console.log(\"etcbs: \",ethb)\r\n        // this.setState({\r\n        //   etherbrightIDs: [...this.state.etherbrightIDs, ethb]\r\n        // })\r\n        \r\n        var ethbSVG = await returnContract.methods.generateEtherbrightsSVG(ethbID).call()\r\n        // console.log(\"svgs: \",returnedSVG)\r\n\r\n        // this.setState({\r\n        //   allSVGs:[...this.state.allSVGs,returnedSVG]\r\n        // })\r\n        // console.log(this.state.allSVGs)\r\n        // _svgmap.set(ethbID,ethbSVG);\r\n        this.setState({\r\n          etherbrights:[...this.state.etherbrights,new Etherbright(ethbID,ethbSVG,0,ethbSVG)]\r\n        })\r\n\r\n      }\r\n      // this.setState({SVGmap:_svgmap})\r\n      console.log(\"allsvgs\",this.state.allSVGs)\r\n      // console.log(\"MAP\", this.state.svgmap)\r\n    } else {\r\n      window.alert('Smart contract not deployed to detected network.')\r\n    }\r\n  }\r\n\r\n\r\n\r\n  //javascript arrow function =>\r\n  // () define the list of pramaters followed by \"fat arrow\" => and {} that delimit the functions body\r\n  // ... is spread syntax which expands an iterable like an array or string \r\n  //\r\n  // this callwebs the mint method in the contract with seend passing the accout\r\n  // .once is a promiss event that watches for events like'receipt' and then can call a function with it\r\n  // when we get a receipt event we call setstate and add the color we justed mined to the list\r\n  \r\n// //#dc34eb\r\n//   mint = (color) => {\r\n//     this.state.contract.methods\r\n//         // this.state.contract\r\n\r\n//     .mint(color)\r\n//     .send({ from: this.state.account })\r\n//     .once('receipt',\r\n//        (receipt) => {\r\n//           this.setState(\r\n//             {\r\n//             colors: [...this.state.colors, color]\r\n//             }\r\n//           )\r\n//         }\r\n//     )\r\n//   }\r\n\r\nmint = (color) => {\r\n  this.state.contract.methods.mint(color)\r\n  .send({from: this.state.account, gas:3000000 })//gas must be set with each call for Ganche-cli\r\n  .on('receipt',\r\n     (receipt) => {\r\n      // console.log(\"got mints receipt\")\r\n        this.setState(\r\n          {\r\n          colors: [...this.state.colors, color]\r\n          }\r\n        )\r\n      }\r\n  )\r\n}\r\n setMethod(newstate){\r\n   var _etherbrights = Object.assign(this.state.etherbrights);\r\n          _etherbrights[1].svg=\"<svg width='100' height='100'><circle cx='50' cy='50' r='20' fill='#ffff00' strokeWidth='9' stroke='black'/></svg>\";\r\n                  console.log(\"SETSTAT\",_etherbrights)\r\n\r\n  this.setState({etherbrights  :[] });\r\n  this.setState({etherbrights:_etherbrights });\r\n  // this.setState(this.state);\r\n  console.log(\"SET METHOD\");\r\n}\r\nmintEtherbright = ()=>{\r\n  this.state.contract.methods.mintEtherbright(this.state.account)\r\n  .send({from: this.state.account ,gas:3000000})\r\n}\r\n\r\n\r\nsetPixelColor = (n, color) =>{\r\n  this.state.contract.methods.setPixel(n, color)\r\n  .send({from: this.state.account, gas:3000000})\r\n\r\n}\r\n\r\nsetEtherbrightPixelColor = (id, pixn, paln) => {\r\n  this.state.contract.methods.setEtherbrightPixel(id, pixn, paln)\r\n  .send({from: this.state.account, gas:3000000})\r\n}\r\n\r\ntestsvgonclick=(e,id)=>{\r\n  console.log(\"Color \",e.target.getAttributeNS(null,\"fill\"))\r\n  console.log(\"ID \",e.target.getAttributeNS(null,\"id\"))\r\n  // window.App.setEtherbrightPixelColor(e.target.getAttributeNS(null,\"id\"),0,0)\r\n\r\n}\r\ngetAllTokenId = ()=>{\r\n  // var nTokens=this.state.contract.methods.totalSupply().call();\r\n  // for (var i = 0; i <nTokens; i++) {\r\n  //   console.log(\"getalldis \",i)\r\n  // }\r\n  this.state.contract.methods.totalSupply().call()\r\n  .then(\r\n      function(totalSupply){\r\n        console.log(\"Total Supply with a promise:\",  totalSupply);\r\n      }\r\n      )\r\n}\r\n\r\nupdate=()=>{this.forceUpdate();\r\nconsole.log(this.state.etherbrights)}\r\n  // mint = (color) => {\r\n  //   this.state.contract.mint(color)\r\n  //   .call({from: this.state.account})\r\n  //   .once('receipt',\r\n  //      (receipt) => {\r\n  //         this.setState(\r\n  //           {\r\n  //           colors: [...this.state.colors, color]\r\n  //           }\r\n  //         )\r\n  //       }\r\n  //   )\r\n  // }\r\n\r\n\r\n\r\nrender() {\r\n  return (\r\n    <div>\r\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n        <a\r\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\r\n          href=\"http://www.TheEverbright.com\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Etherbright\r\n        </a>\r\n        <ul className=\"navbar-nav px-3\">\r\n          <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\r\n            <small className=\"text-white\"><span id=\"account\">{this.state.account}</span></small>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n      <div className=\"container-fluid mt-5\">\r\n        <div className=\"row\">\r\n          <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\r\n            <div className=\"content mr-auto ml-auto\">\r\n              <h1>setPixelColor</h1>\r\n              <form onSubmit={(event) => {\r\n                event.preventDefault()\r\n                const color = this.color.value\r\n                const n = this.n.value\r\n                this.setPixelColor(n,color)\r\n              }}>\r\n                <input\r\n                  type='text'\r\n                  className='form-control mb-1'\r\n                  placeholder='e.g. #FFFFFF'\r\n                  ref={(input) => { this.color = input }}\r\n                />\r\n                <input\r\n                  type='text'\r\n                  className='form-control mb-1'\r\n                  placeholder='pixel number'\r\n                  ref={(input) => { this.n = input }}\r\n                />\r\n                <input\r\n                  type='submit'\r\n                  className='btn btn-block btn-primary'\r\n                  value='SET PIXEL COLOR'\r\n                />\r\n              </form>\r\n            </div>\r\n          </main>\r\n        </div>\r\n          <hr/>\r\n          <button onClick={this.mintEtherbright}>mint etherbright</button>\r\n          <hr/>\r\n          <button onClick={this.getAllTokenId}>get all token ID</button>\r\n           <hr/>\r\n          <button onClick={this.update}>update</button>\r\n          {/*\r\n          <hr/>\r\n          <h1>JUNK</h1>\r\n          <div dangerouslySetInnerHTML={{__html: this.state.svg }} />\r\n          <hr/>\r\n          <div dangerouslySetInnerHTML={{__html: this.state.allSVGs }} />\r\n          <h1>more 2JUNK</h1>\r\n            <svg width='100' height='100'>\r\n            <circle cx='50' cy='50' r='20' fill='#ffff00' strokeWidth='9' stroke='black'/>\r\n            </svg>\r\n          <hr/>\r\n        */}\r\n\r\n\r\n\r\n\r\n        <div className=\"row text-center\">\r\n\r\n\r\n          <div>\r\n\r\n\r\n\r\n            {this.state.etherbrights.map(ethb => (\r\n              <div id=\"parent\">\r\n              <hr/>\r\n                <EthbDisplay id={ethb.id} svg={ethb.svg} setmethod={(id,pixn,paln)=>this.setEtherbrightPixelColor(id,pixn,paln)} testsvg={(e,id)=>this.testsvgonclick(e,id)}/>\r\n              </div>\r\n            ))}\r\n\r\n          </div>\r\n\r\n\r\n        {/*  { this.state.colors.map(\r\n            (color, key) => {\r\n              return(\r\n                <div key={key} className=\"col-md-3 mb-3\">\r\n                  <div className=\"token\" style={{ backgroundColor: color }}></div>\r\n                  <div>{color}</div>\r\n                </div>\r\n              )\r\n            })\r\n          }\r\n          */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n }\r\n}\r\n\r\nclass EthbDisplay extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    // this.testsvgonclick=this.testsvgonclick.bind(this);\r\n    this.state={\r\n      id: props.id,\r\n      svg: props.svg,\r\n    };\r\n  }\r\ncomponentWillReceiveProps(newProps){\r\n    this.setState({\r\n        location: newProps.location\r\n    })\r\n}\r\n  render(){\r\n    return(\r\n      <div>\r\n          <h1>ETHBDISPLAY</h1>\r\n                <div dangerouslySetInnerHTML={{__html: this.state.svg }} />\r\n                Etherbright id: {this.state.id.toHexString()}\r\n\r\n\r\n            <svg width='100' height='100'>\r\n            <circle id={this.state.id.toHexString()} cx='50' cy='50' r='20' fill='#ffff00' strokeWidth='9' stroke='black' onClick  ={(e) => {this.props.testsvg(e) ;}}/>\r\n            </svg>\r\n              <h3>setPixelColor</h3>\r\n              <form onSubmit={(event) => {\r\n                event.preventDefault()\r\n                const paln = this.paln.value\r\n                const pixn = this.pixn.value\r\n                const id = this.state.id\r\n                this.props.setmethod(this.state.id,pixn,paln)\r\n              }}>\r\n                <input\r\n                  type='text'\r\n                  className='form-control mb-1'\r\n                  placeholder='pixel number'\r\n                  ref={(input) => { this.pixn = input }}\r\n                />\r\n                <input\r\n                  type='text'\r\n                  className='form-control mb-1'\r\n                  placeholder='pallent n'\r\n                  ref={(input) => { this.paln = input }}\r\n                />\r\n                <input\r\n                  type='submit'\r\n                  className='btn btn-block btn-primary'\r\n                  value='SET PIXEL COLOR'\r\n                />\r\n              </form>\r\n      <button className=\"button\" onClick={() => alert(this.state.id)}>\r\n      </button>\r\n          <hr/>\r\n          </div>\r\n      );\r\n    }\r\n}\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}