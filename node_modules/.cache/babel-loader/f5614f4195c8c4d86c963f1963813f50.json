{"ast":null,"code":"import _regeneratorRuntime from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"H:\\\\Expermental\\\\nft\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react'; // import { ReactSVG } from 'react-svg'\n// import logo from '../logo.png';\n\nimport './App.css';\nimport Web3 from 'web3';\nimport Color from '../abis/Color.json';\nimport { CirclePicker } from 'react-color';\n\nfunction Etherbright(id, xpos, ypos, pixels, pallet, svg, mode, owner) {\n  this.id = id;\n  this.owner = owner;\n  this.svg = svg;\n  this.mode = 0;\n  this.pixels = pixels;\n  this.pallent = pallet;\n  this.xpos = xpos;\n  this.ypos = ypos;\n}\n\nfunction Pixel(id, xpos, ypos, color) {\n  this.id = id;\n  this.xpos = xpos;\n  this.ypos = ypos;\n  this.color = color;\n} // function  svgonclick(e,id){\n//   console.log(\"Color \",e.target.getAttributeNS(null,\"fill\"));\n//   console.log(\"ID \",e.target.getAttributeNS(null,\"id\"));\n//   window.App.setEtherbrightPixelColor(e.target.getAttributeNS(null,\"id\"),0,0);\n// };\n\n\nfunction generateSvg(id, pixels) {\n  var header = \"<svg width='300' height='300'>\";\n  var footer = \"</svg>\"; // var body\n\n  var xoff = 50;\n  var yoff = 50;\n  var p = 0; // for(var p=0; p<24; p++){\n  //   var c=pixels[p];\n  //   var e=\"<circle id={this.state.id.toHexString()} cx='\"+p+\"' cy='50' r='20' fill=\"+c+\" strokeWidth='9' stroke='black' onClick  ={(e) => {this.props.testsvg(e) ;}}/>\";\n  //   header=header.concat(e);\n  // }\n\n  for (var x = 1; x <= 5; x++) {\n    for (var y = 1; y <= 5; y++) {\n      // console.log(\"x:\",x,\" y:\",y,\" p:\",p,\" c:\",c);\n      var c = pixels[p];\n      var e = \"<circle id='\" + id + \"' cx='\" + xoff * x + \"' cy='\" + yoff * y + \"' r='20' fill=\" + c + \" strokeWidth='10' stroke='black' onClick  ='{(e) => {this.props.testsvg(e);}}'/>\";\n      header = header.concat(e);\n      p++;\n    }\n  }\n\n  header = header.concat(\"</svg>\");\n  return header; // console.log(\"generateSVG  \",header)\n}\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.mint = function (color) {\n      _this.state.contract.methods.mint(color).send({\n        from: _this.state.account,\n        gas: 3000000\n      }) //gas must be set with each call for Ganche-cli\n      .on('receipt', function (receipt) {\n        // console.log(\"got mints receipt\")\n        _this.setState({\n          colors: [].concat(_toConsumableArray(_this.state.colors), [color])\n        });\n      });\n    };\n\n    _this.mintEtherbright = function () {\n      _this.state.contract.methods.mintEtherbright(_this.state.account).send({\n        from: _this.state.account,\n        gas: 3000000\n      });\n    };\n\n    _this.setPixelColor = function (n, color) {\n      _this.state.contract.methods.setPixel(n, color).send({\n        from: _this.state.account,\n        gas: 3000000\n      });\n    };\n\n    _this.setEtherbrightPixelColor = function (id, pixn, paln) {\n      _this.state.contract.methods.setEtherbrightPixel(id, pixn, paln).send({\n        from: _this.state.account,\n        gas: 3000000\n      });\n    };\n\n    _this.testsvgonclick = function (e, id) {\n      console.log(\"Pix N \", e.target.getAttributeNS(null, \"pn\"));\n      console.log(\"Color \", e.target.getAttributeNS(null, \"fill\"));\n      console.log(\"ID \", e.target.getAttributeNS(null, \"id\")); // window.App.setEtherbrightPixelColor(e.target.getAttributeNS(null,\"id\"),0,0)\n    };\n\n    _this.getAllTokenId = function () {\n      // var nTokens=this.state.contract.methods.totalSupply().call();\n      // for (var i = 0; i <nTokens; i++) {\n      //   console.log(\"getalldis \",i)\n      // }\n      _this.state.contract.methods.totalSupply().call().then(function (totalSupply) {\n        console.log(\"Total Supply with a promise:\", totalSupply);\n      });\n    };\n\n    _this.update = function () {\n      _this.forceUpdate();\n\n      console.log(_this.state.etherbrights);\n    };\n\n    _this.state = {\n      account: '',\n      contract: null,\n      totalSupply: 1,\n      svg: '',\n      colors: [],\n      etherbrights: [],\n      etherbrightIDs: [],\n      allSVGs: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(\"loadWeb3\");\n\n                if (!window.ethereum) {\n                  _context.next = 8;\n                  break;\n                }\n\n                console.log(\"loadWeb3  ETH\"); // window.web3 = new Web3(window.ethereum)\n\n                window.web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8545'));\n                _context.next = 6;\n                return window.ethereum.enable();\n\n              case 6:\n                _context.next = 9;\n                break;\n\n              case 8:\n                if (window.web3) {\n                  console.log(\"loadWeb3  WEB3\"); // window.web3 = new Web3(window.web3.currentProvider)\n\n                  window.web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8545'));\n                } else {\n                  window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n                }\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                console.log(\"loadingWeb3\");\n                _context2.next = 3;\n                return this.loadWeb3();\n\n              case 3:\n                console.log(\"loadBlockchainData\");\n                _context2.next = 6;\n                return this.loadBlockchainData();\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        var web3, accounts, networkId, networkData, abi, address, returnContract, returntotalSupply, i, ethb, ethbID, owner, proms, pixels, allProms;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3; // Load account\n\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                //gets accout from metamask\n                this.setState({\n                  account: accounts[0]\n                }); //state store property values of a componet and when the state chages the componet re-renders\n\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                //detercts the eth network \n                networkData = Color.networks[networkId]; //gets the contracts address on the network\n\n                console.log(\"netowrkdata\", networkId);\n\n                if (!networkData) {\n                  _context3.next = 51;\n                  break;\n                }\n\n                //if it has an addres\n                abi = Color.abi; //creates a JS version of the contract with its abi\n\n                address = networkData.address; //its actual address?\n\n                console.log(\"networkData:\", networkData);\n                console.log(\"addy\", address);\n                console.log(\"abi:\", abi);\n                returnContract = new web3.eth.Contract(abi, address); //creates a new version of this contract\n\n                this.setState({\n                  contract: returnContract\n                }); //sets it in state obj\n\n                console.log(\"contract:\", this.state.contract); // console.log(\"calling test return\")\n                // const testreturn=returnContract.methods.testReturn(\"this is a test\").call({from: this.state.account})\n                // console.log(\"testreturn \",testreturn)\n\n                console.log(\"calling totalssupply\");\n                _context3.next = 22;\n                return returnContract.methods.totalSupply().call();\n\n              case 22:\n                returntotalSupply = _context3.sent;\n                //calls a contracts method\n                console.log(\"returntotalsupply\", returntotalSupply.toString());\n                console.log(\"state total supply\", this.state.totalSupply);\n                this.setState({\n                  totalSupply: returntotalSupply\n                }); //sets state var\n                // var returnSVG = await returnContract.methods.generateSVG().call()\n                // this.setState({svg:returnSVG})\n                // const tmp=\"<svg><circle cx=\"50\" cy=\"50\" r=\"20\" fill=\"#ff0000\" stroke-width=\"9\" stroke=\"black\"/></svg>\"\n                // this.setState({svg:\"<svg width='100' height='100'><circle cx='50' cy='50' r='20' fill='#ffff00' stroke-width='9' stroke='black'/></svg>\"})\n                // console.log(\"SVG: \",this.state.svg)\n\n                returnContract.events.Selector().on('data', function (event) {\n                  console.log(\"SELECTOR: \", event.returnValues[0]);\n                }).on('error', console.error); // returnContract.events.SVGgenerated()\n                // .on('data', (event) => {\n                //   console.log(\"SVG EVENT \",event);\n                //   this.setState({svg:event.returnValues[0]})\n                // })\n                // .on('error', console.error)\n                // returnContract.events.EtherbrightSVGgenerated()\n                // .on('data', (event) => {\n                //   console.log(\"ETHB SVG EVENT \",event);\n                //   // this.setState({svg:event.returnValues[0]})\n                // })\n                // .on('error', console.error)\n\n                returnContract.events.EtherbrightPixelChanged().on('data', function (event) {\n                  console.log(\"ETHB PIXEL CHANGED EVENT \", event); // returnContract.methods.generateEtherbrightsSVG(event.returnValues[0]).call()\n                  //   .then(function(result){console.log(result)})\n\n                  for (var index = 0; index < _this2.state.etherbrights.length; index++) {\n                    console.log(\"index \", index);\n                    console.log(\"state ID \", _this2.state.etherbrights[index].id.toHexString());\n                    console.log(\"token id \", event.returnValues[0].toHexString());\n\n                    if (_this2.state.etherbrights[index].id.toHexString() === event.returnValues[0].toHexString()) {\n                      console.log(\"THIS IS IT\");\n                      break;\n                    }\n                  }\n\n                  var _etherbrights = Object.assign(_this2.state.etherbrights);\n\n                  var tmp;\n                  var pixN = event.returnValues[1]; // _etherbrights[index].svg=event.returnValues[1]\n\n                  _etherbrights[index].pixels[pixN].color = event.returnValues[3];\n                  console.log(\"tmp result \", tmp);\n\n                  _this2.setState({\n                    etherbrights: []\n                  });\n\n                  _this2.setState({\n                    etherbrights: _etherbrights\n                  }); // this.setMethod(_etherbrights);\n                  // this.state.etherbrights.map(ethb =>{\n                  //   if(ethb.id=event.returnValues[0]){\n                  //     // console.log(\"THIS IS IT\", index);\n                  //     var returnSVG =  returnContract.methods.generateEtherbrightsSVG(event.returnValues[0]).call()\n                  //     // this.setState()\n                  //     // let tmparray=this.state.etherbrights.slice();\n                  //     // tmparray[id][svg]=returnSVG;\n                  //     // setarray(tmparray);\n                  //   }\n                  //   }\n                  //   )\n\n                }).on('error', console.error); // returnContract.events.PixelChanged()\n                // .on('data', (event) => {\n                //   console.log(\"PIXEL CHANGED EVENT \",event.returnValues[0]);\n                // })\n                // .on('error', console.error)\n                // returnContract.events.EtherbrightMinted()\n                // .on('data', (event) => {\n                //   console.log(\"Etherbright Minted \",event);\n                //     var ethb=new Etherbright(event.returnValues[0],event.returnValues[1]);\n                //   this.setState({\n                //     etherbrights: [...this.state.etherbrights, ethb]\n                //   })\n                // })\n                // .on('error', console.error)\n\n                returnContract.events.EtherbrightMinted().on('data', function (event) {\n                  console.log(\"Etherbright Minted \", event);\n                  var id = event.returnValues[0];\n                  var owner = event.returnValues[1];\n                  console.log(\" minted id \", id);\n                  var pixels = [];\n                  var svg = \"tmp\";\n                  var waiting = 1;\n                  var ethb = new Etherbright();\n                  ethb.id = id;\n                  ethb.owner = owner;\n                  var proms = [];\n                  var pixelColors = []; // returnContract.methods.getEtherbrightPallet(id).call().then(function(result){ethb.pallet=result;console.log(\"PALLET \",result)});\n                  // returnContract.methods.getEtherbrightPixels(id).call().then(function(result){pixelColors=result;console.log(\"PALLET \",result)});\n\n                  proms.push(returnContract.methods.getEtherbrightPallet(id).call());\n                  proms.push(returnContract.methods.getEtherbrightPixels(id).call());\n                  var allProms = Promise.all(proms);\n                  allProms.then(function (data) {\n                    console.log(\"DATA 0\", data[0]);\n                    ethb.pallet = data[0];\n                    console.log(\"ethb.pallet \", ethb.pallet);\n                    console.log(\"ALL PROMS ID \", ethb.id);\n                    var xoff = 50;\n                    var yoff = 50;\n                    var p = 0;\n                    var pixels = [];\n\n                    for (var x = 1; x <= 5; x++) {\n                      for (var y = 1; y <= 5; y++) {\n                        pixels.push(new Pixel(p, xoff * x, yoff * y, data[1][p]));\n                        p++;\n                      }\n                    }\n\n                    ethb.pixels = pixels;\n                    console.log(\"PIX \", ethb.pixels);\n                    console.log(\"PALLET \", ethb.pallet); // ethb.svg=generateSvg(ethb.id,ethb.pixels);\n\n                    _this2.setState({\n                      etherbrights: [].concat(_toConsumableArray(_this2.state.etherbrights), [ethb])\n                    });\n                  }); // for(var p=0; p<24; p++){\n                  //  proms.push(returnContract.methods.getEtherbrightPixelColor(id,p).call())\n                  // }\n                  // var allProms=Promise.all(proms);\n                  //   allProms.then((data) => {\n                  //     console.log(\"ALL PROMS ID \",ethb.id); \n                  //       var xoff=50;\n                  //      var yoff=50;\n                  //       var p=0;\n                  //       var pixels=[];\n                  //       for(var x=1; x<=5; x++){\n                  //         for(var y=1; y<=5; y++){\n                  //           pixels.push(new Pixel(p,xoff*x,yoff*y,data[p]))\n                  //           p++;\n                  //         }\n                  //       }\n                  //     ethb.pixels=pixels;\n                  //     console.log(\"PIX \",ethb.pixels);\n                  //     console.log(\"PALLET \",ethb.pallet);\n                  //     ethb.svg=generateSvg(ethb.id,ethb.pixels);\n                  //     this.setState({\n                  //     etherbrights: [...this.state.etherbrights, ethb]\n                  //     })\n                  //   })\n                  //     var xoff=50;\n                  //    var yoff=50;\n                  //     var p=0;\n                  //     var pixels=[];\n                  //     for(var x=1; x<=5; x++){\n                  //       for(var y=1; y<=5; y++){\n                  //         pixels.push(new Pixel(p,xoff*x,yoff*y,pixelColors[p]))\n                  //         p++;\n                  //       }\n                  //     }\n                  //   ethb.pixels=pixels;\n                  //   console.log(\"PIX \",ethb.pixels);\n                  //   console.log(\"PALLET \",ethb.pallet);\n                  //   ethb.svg=generateSvg(ethb.id,ethb.pixels);\n                  //   this.setState({\n                  //   etherbrights: [...this.state.etherbrights, ethb]\n                  // })\n                }).on('error', console.error);\n                returnContract.events.Transfer().on('data', function (event) {\n                  console.log(\"GOT EVENT\");\n                  console.log(event);\n                }).on('error', console.error); // returnContract.getPastEvents('PixelChanged', {\n                //     fromBlock: 0,\n                //     toBlock: 'latest'\n                // }, function(error, events){ console.log(events); })\n                // .then(function(events){\n                //     console.log(events) // same results as the optional callback above\n                // });\n                // returnContract.getPastEvents('SVGgenerated', {\n                //     fromBlock: 0,\n                //     toBlock: 'latest'\n                // }, function(error, events){ \n                //     console.log(events); \n                //     // returnSVG= returnContract.methods.generateSVG().call();\n                //     // this.setState({svg:returnSVG});\n                //    })\n                // .then(function(events){\n                //     console.log(events) // same results as the optional callback above\n                // });\n                // Load Colors\n                // for (var i = 1; i <= returntotalSupply; i++) {\n                //   const color = await returnContract.methods.colors(i - 1).call()\n                //   this.setState({\n                //     colors: [...this.state.colors, color]\n                //   })\n                // }\n                // var _svgmap = new Map();\n\n                i = 1;\n\n              case 31:\n                if (!(i <= returntotalSupply)) {\n                  _context3.next = 49;\n                  break;\n                }\n\n                ethb = new Etherbright();\n                _context3.next = 35;\n                return returnContract.methods.tokenByIndex(i - 1).call();\n\n              case 35:\n                ethbID = _context3.sent;\n                _context3.next = 38;\n                return returnContract.methods.ownerOf(ethbID).call();\n\n              case 38:\n                owner = _context3.sent;\n                ethb.id = ethbID;\n                ethb.owner = owner;\n                proms = [];\n                pixels = []; // console.log(\" startup ALL PROMS ID 1\",ethb.id); \n                // for(var p=0; p<24; p++){\n                //   proms.push(returnContract.methods.getEtherbrightPixelColor(ethb.id,p).call())\n                // }\n\n                proms.push(returnContract.methods.getEtherbrightPixels(ethbID).call());\n                allProms = Promise.all(proms);\n                allProms.then(function (data) {\n                  // console.log(\" startup ALL PROMS ID 2\",ethbID); \n                  var xoff = 50;\n                  var yoff = 50;\n                  var p = 0;\n                  var pixels = [];\n\n                  for (var x = 1; x <= 5; x++) {\n                    for (var y = 1; y <= 5; y++) {\n                      pixels.push(new Pixel(p, xoff * x, yoff * y, data[0][p]));\n                      p++;\n                    }\n                  }\n\n                  ethb.pixels = pixels; // console.log(\"PIX \",ethb.pixels);\n\n                  ethb.svg = generateSvg(ethb.id, ethb.pixels);\n                  ethb.id = ethbID;\n                  ethb.owner = owner;\n\n                  _this2.setState({\n                    etherbrights: [].concat(_toConsumableArray(_this2.state.etherbrights), [ethb])\n                  }); // console.log(\"prom data \",data);\n                  // console.log(\"supply \",this.state.totalSupply);\n                  // console.log(\"generateSVG  \", ethb.svg)\n\n                }, ethbID);\n\n              case 46:\n                i++;\n                _context3.next = 31;\n                break;\n\n              case 49:\n                _context3.next = 52;\n                break;\n\n              case 51:\n                window.alert('Smart contract not deployed to detected network.');\n\n              case 52:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }() //javascript arrow function =>\n    // () define the list of pramaters followed by \"fat arrow\" => and {} that delimit the functions body\n    // ... is spread syntax which expands an iterable like an array or string \n    //\n    // this callwebs the mint method in the contract with seend passing the accout\n    // .once is a promiss event that watches for events like'receipt' and then can call a function with it\n    // when we get a receipt event we call setstate and add the color we justed mined to the list\n    // //#dc34eb\n    //   mint = (color) => {\n    //     this.state.contract.methods\n    //         // this.state.contract\n    //     .mint(color)\n    //     .send({ from: this.state.account })\n    //     .once('receipt',\n    //        (receipt) => {\n    //           this.setState(\n    //             {\n    //             colors: [...this.state.colors, color]\n    //             }\n    //           )\n    //         }\n    //     )\n    //   }\n\n  }, {\n    key: \"setMethod\",\n    value: function setMethod(newstate) {\n      var _etherbrights = Object.assign(this.state.etherbrights);\n\n      _etherbrights[1].svg = \"<svg width='100' height='100'><circle cx='50' cy='50' r='20' fill='#ffff00' strokeWidth='9' stroke='black'/></svg>\";\n      console.log(\"SETSTAT\", _etherbrights);\n      this.setState({\n        etherbrights: []\n      });\n      this.setState({\n        etherbrights: _etherbrights\n      }); // this.setState(this.state);\n\n      console.log(\"SET METHOD\");\n    }\n  }, {\n    key: \"render\",\n    // mint = (color) => {\n    //   this.state.contract.mint(color)\n    //   .call({from: this.state.account})\n    //   .once('receipt',\n    //      (receipt) => {\n    //         this.setState(\n    //           {\n    //           colors: [...this.state.colors, color]\n    //           }\n    //         )\n    //       }\n    //   )\n    // }\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 536\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 537\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"navbar-brand col-sm-3 col-md-2 mr-0\",\n        href: \"http://www.TheEverbright.com\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 538\n        },\n        __self: this\n      }, \"Etherbright\"), React.createElement(\"ul\", {\n        className: \"navbar-nav px-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 546\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: \"nav-item text-nowrap d-none d-sm-none d-sm-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 547\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        className: \"text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 548\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        id: \"account\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 548\n        },\n        __self: this\n      }, this.state.account))))), React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 552\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 553\n        },\n        __self: this\n      }, React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 d-flex text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 554\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 555\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 556\n        },\n        __self: this\n      }, \"setPixelColor\"), React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          event.preventDefault();\n          var color = _this3.color.value;\n          var n = _this3.n.value;\n\n          _this3.setPixelColor(n, color);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 557\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control mb-1\",\n        placeholder: \"e.g. #FFFFFF\",\n        ref: function ref(input) {\n          _this3.color = input;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 563\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control mb-1\",\n        placeholder: \"pixel number\",\n        ref: function ref(input) {\n          _this3.n = input;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 569\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        className: \"btn btn-block btn-primary\",\n        value: \"SET PIXEL COLOR\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 575\n        },\n        __self: this\n      }))))), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 584\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.mintEtherbright,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 585\n        },\n        __self: this\n      }, \"mint etherbright\"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 586\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.getAllTokenId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 587\n        },\n        __self: this\n      }, \"get all token ID\"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 588\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.update,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 589\n        },\n        __self: this\n      }, \"update\"), React.createElement(\"div\", {\n        className: \"row text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 606\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 609\n        },\n        __self: this\n      }, this.state.etherbrights.map(function (ethb) {\n        return React.createElement(\"div\", {\n          id: \"parent\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 614\n          },\n          __self: this\n        }, React.createElement(\"hr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 615\n          },\n          __self: this\n        }), React.createElement(EthbDisplay, {\n          id: ethb.id,\n          owner: ethb.owner,\n          pixels: ethb.pixels,\n          setmethod: function setmethod(id, pixn, paln) {\n            return _this3.setEtherbrightPixelColor(id, pixn, paln);\n          },\n          testsvg: function testsvg(e, id) {\n            return _this3.testsvgonclick(e, id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 616\n          },\n          __self: this\n        }));\n      })))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nvar EthbDisplay = /*#__PURE__*/function (_Component2) {\n  _inherits(EthbDisplay, _Component2);\n\n  function EthbDisplay(props) {\n    var _this4;\n\n    _classCallCheck(this, EthbDisplay);\n\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(EthbDisplay).call(this, props)); // this.testsvgonclick=this.testsvgonclick.bind(this);\n\n    _this4.state = {\n      id: props.id,\n      pixels: props.pixels,\n      owner: props.owner\n    };\n    return _this4;\n  }\n\n  _createClass(EthbDisplay, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(newProps) {\n      this.setState({\n        location: newProps.location\n      });\n    }\n  }, {\n    key: \"getAllColors\",\n    value: function getAllColors() {\n      console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n      return this.state.pixels.color.map();\n    }\n  }, {\n    key: \"getCircle\",\n    value: function getCircle(n, x, y, c) {\n      var _this5 = this;\n\n      return React.createElement(\"circle\", {\n        id: this.state.id.toHexString(),\n        pn: n,\n        cx: x,\n        cy: y,\n        r: \"20\",\n        fill: c,\n        strokeWidth: \"8\",\n        stroke: \"black\",\n        onClick: function onClick(e) {\n          _this5.props.testsvg(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 664\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 669\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        width: \"300\",\n        height: \"300\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 670\n        },\n        __self: this\n      }, this.state.pixels.map(function (pix) {\n        return _this6.getCircle(pix.id, pix.xpos, pix.ypos, pix.color);\n      })), React.createElement(\"div\", {\n        align: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 673\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 674\n        },\n        __self: this\n      }, \"Etherbright id:\"), \" \", React.createElement(\"h6\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 674\n        },\n        __self: this\n      }, \" \", this.state.id.toHexString()), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 675\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 676\n        },\n        __self: this\n      }, \"Etherbright owner:\"), \" \", this.state.owner), React.createElement(CirclePicker, {\n        colors: this.getAllColors(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 678\n        },\n        __self: this\n      }), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 684\n        },\n        __self: this\n      }, \"setPixelColor\"), React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          event.preventDefault();\n          var paln = _this6.paln.value;\n          var pixn = _this6.pixn.value;\n          var id = _this6.state.id;\n\n          _this6.props.setmethod(_this6.state.id, pixn, paln);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 685\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control mb-1\",\n        placeholder: \"pixel number\",\n        ref: function ref(input) {\n          _this6.pixn = input;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 692\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control mb-1\",\n        placeholder: \"pallent n\",\n        ref: function ref(input) {\n          _this6.paln = input;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 698\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        className: \"btn btn-block btn-primary\",\n        value: \"SET PIXEL COLOR\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 704\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        className: \"button\",\n        onClick: function onClick() {\n          return alert(_this6.state.id);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 710\n        },\n        __self: this\n      }), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 712\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return EthbDisplay;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["H:/Expermental/nft/src/components/App.js"],"names":["React","Component","Web3","Color","CirclePicker","Etherbright","id","xpos","ypos","pixels","pallet","svg","mode","owner","pallent","Pixel","color","generateSvg","header","footer","xoff","yoff","p","x","y","c","e","concat","App","props","mint","state","contract","methods","send","from","account","gas","on","receipt","setState","colors","mintEtherbright","setPixelColor","n","setPixel","setEtherbrightPixelColor","pixn","paln","setEtherbrightPixel","testsvgonclick","console","log","target","getAttributeNS","getAllTokenId","totalSupply","call","then","update","forceUpdate","etherbrights","etherbrightIDs","allSVGs","window","ethereum","web3","providers","WebsocketProvider","enable","alert","loadWeb3","loadBlockchainData","eth","getAccounts","accounts","net","getId","networkId","networkData","networks","abi","address","returnContract","Contract","returntotalSupply","toString","events","Selector","event","returnValues","error","EtherbrightPixelChanged","index","length","toHexString","_etherbrights","Object","assign","tmp","pixN","EtherbrightMinted","waiting","ethb","proms","pixelColors","push","getEtherbrightPallet","getEtherbrightPixels","allProms","Promise","all","data","Transfer","i","tokenByIndex","ethbID","ownerOf","newstate","preventDefault","value","input","map","EthbDisplay","newProps","location","testsvg","pix","getCircle","getAllColors","setmethod"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n// import { ReactSVG } from 'react-svg'\r\n// import logo from '../logo.png';\r\nimport './App.css';\r\nimport Web3 from 'web3';\r\nimport Color from '../abis/Color.json'\r\nimport { CirclePicker } from 'react-color';\r\n\r\n\r\nfunction Etherbright(id, xpos,ypos, pixels, pallet, svg, mode, owner ){\r\n  this.id=id;\r\n  this.owner=owner;\r\n  this.svg=svg;\r\n  this.mode=0;\r\n  this.pixels=pixels;\r\n  this.pallent=pallet;\r\n  this.xpos=xpos;\r\n  this.ypos=ypos;\r\n\r\n}\r\nfunction Pixel(id,xpos,ypos,color){\r\n  this.id=id;\r\n  this.xpos=xpos;\r\n  this.ypos=ypos;\r\n  this.color=color;\r\n}\r\n\r\n\r\n    \r\n// function  svgonclick(e,id){\r\n//   console.log(\"Color \",e.target.getAttributeNS(null,\"fill\"));\r\n//   console.log(\"ID \",e.target.getAttributeNS(null,\"id\"));\r\n//   window.App.setEtherbrightPixelColor(e.target.getAttributeNS(null,\"id\"),0,0);\r\n\r\n// };\r\n\r\nfunction generateSvg(id, pixels){\r\n  var header=\"<svg width='300' height='300'>\";\r\n  var footer=\"</svg>\";\r\n  // var body\r\n  var xoff=50;\r\n  var yoff=50;\r\n  var p=0;\r\n  // for(var p=0; p<24; p++){\r\n  //   var c=pixels[p];\r\n  //   var e=\"<circle id={this.state.id.toHexString()} cx='\"+p+\"' cy='50' r='20' fill=\"+c+\" strokeWidth='9' stroke='black' onClick  ={(e) => {this.props.testsvg(e) ;}}/>\";\r\n  //   header=header.concat(e);\r\n  // }\r\n    for(var x=1; x<=5; x++){\r\n      for(var y=1; y<=5; y++){\r\n        // console.log(\"x:\",x,\" y:\",y,\" p:\",p,\" c:\",c);\r\n        var c=pixels[p];\r\n        var e=\"<circle id='\"+id+\"' cx='\"+xoff*x+\"' cy='\"+yoff*y+\"' r='20' fill=\"+c+\" strokeWidth='10' stroke='black' onClick  ='{(e) => {this.props.testsvg(e);}}'/>\";\r\n        header=header.concat(e);\r\n        p++;\r\n      } \r\n    }\r\n  header=header.concat(\"</svg>\");\r\n  return header;\r\n// console.log(\"generateSVG  \",header)\r\n\r\n}\r\n  \r\n\r\nclass App extends Component {\r\n\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state={\r\n      account:'',\r\n      contract: null,\r\n      totalSupply: 1,\r\n      svg:'', \r\n      colors: [],\r\n      etherbrights: [],\r\n      etherbrightIDs: [],\r\n      allSVGs: [],\r\n\r\n    }\r\n\r\n  }\r\n\r\n  async loadWeb3() {\r\n      console.log(\"loadWeb3\");\r\n\r\n    if (window.ethereum) {\r\n            console.log(\"loadWeb3  ETH\");\r\n\r\n      // window.web3 = new Web3(window.ethereum)\r\n            window.web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8545'))\r\n\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n                  console.log(\"loadWeb3  WEB3\");\r\n\r\n      // window.web3 = new Web3(window.web3.currentProvider)\r\n      window.web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8545'))\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n  }\r\n\r\n  async componentWillMount() {\r\n    console.log(\"loadingWeb3\")\r\n    await this.loadWeb3()\r\n    console.log(\"loadBlockchainData\")\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts() //gets accout from metamask\r\n    this.setState({ account: accounts[0] })//state store property values of a componet and when the state chages the componet re-renders\r\n    const networkId = await web3.eth.net.getId() //detercts the eth network \r\n    const networkData = Color.networks[networkId] //gets the contracts address on the network\r\n    console.log(\"netowrkdata\",networkId)\r\n    if(networkData) {//if it has an addres\r\n      const abi = Color.abi //creates a JS version of the contract with its abi\r\n      const address = networkData.address //its actual address?\r\n      console.log(\"networkData:\",networkData);\r\n      console.log(\"addy\",address);\r\n      console.log(\"abi:\",abi);\r\n\r\n      const returnContract = new web3.eth.Contract(abi, address)//creates a new version of this contract\r\n      this.setState({ contract:returnContract })//sets it in state obj\r\n      console.log(\"contract:\",this.state.contract)\r\n      // console.log(\"calling test return\")\r\n      // const testreturn=returnContract.methods.testReturn(\"this is a test\").call({from: this.state.account})\r\n      // console.log(\"testreturn \",testreturn)\r\n      console.log(\"calling totalssupply\")\r\n      const returntotalSupply = await returnContract.methods.totalSupply().call()//calls a contracts method\r\n      console.log(\"returntotalsupply\",returntotalSupply.toString())\r\n      console.log(\"state total supply\",this.state.totalSupply)\r\n      this.setState({ totalSupply:returntotalSupply }) //sets state var\r\n      // var returnSVG = await returnContract.methods.generateSVG().call()\r\n      // this.setState({svg:returnSVG})\r\n      // const tmp=\"<svg><circle cx=\"50\" cy=\"50\" r=\"20\" fill=\"#ff0000\" stroke-width=\"9\" stroke=\"black\"/></svg>\"\r\n\r\n      // this.setState({svg:\"<svg width='100' height='100'><circle cx='50' cy='50' r='20' fill='#ffff00' stroke-width='9' stroke='black'/></svg>\"})\r\n      // console.log(\"SVG: \",this.state.svg)\r\n\r\n      returnContract.events.Selector()\r\n      .on('data', (event) => {\r\n        console.log(\"SELECTOR: \",event.returnValues[0]);\r\n      })\r\n      .on('error', console.error)\r\n\r\n      // returnContract.events.SVGgenerated()\r\n      // .on('data', (event) => {\r\n      //   console.log(\"SVG EVENT \",event);\r\n      //   this.setState({svg:event.returnValues[0]})\r\n      // })\r\n      // .on('error', console.error)\r\n\r\n      // returnContract.events.EtherbrightSVGgenerated()\r\n      // .on('data', (event) => {\r\n      //   console.log(\"ETHB SVG EVENT \",event);\r\n      //   // this.setState({svg:event.returnValues[0]})\r\n      // })\r\n      // .on('error', console.error)\r\n\r\n      returnContract.events.EtherbrightPixelChanged()\r\n      .on('data', (event) => {\r\n        console.log(\"ETHB PIXEL CHANGED EVENT \",event);\r\n          // returnContract.methods.generateEtherbrightsSVG(event.returnValues[0]).call()\r\n          //   .then(function(result){console.log(result)})\r\n\r\n        for (var index = 0; index < this.state.etherbrights.length; index++) {\r\n          console.log(\"index \",index);\r\n          console.log(\"state ID \",this.state.etherbrights[index].id.toHexString());\r\n          console.log(\"token id \",event.returnValues[0].toHexString());\r\n\r\n          if (this.state.etherbrights[index].id.toHexString() === event.returnValues[0].toHexString()) {\r\n            console.log(\"THIS IS IT\")\r\n            break;\r\n          }\r\n        }\r\n\r\n        var _etherbrights = Object.assign(this.state.etherbrights);\r\n        var tmp;\r\n        var pixN=event.returnValues[1];\r\n        // _etherbrights[index].svg=event.returnValues[1]\r\n        _etherbrights[index].pixels[pixN].color=event.returnValues[3];\r\n\r\n        console.log(\"tmp result \",tmp );\r\n        this.setState({etherbrights  :[] });\r\n          this.setState({etherbrights:_etherbrights });\r\n\r\n              // this.setMethod(_etherbrights);\r\n\r\n\r\n\r\n        // this.state.etherbrights.map(ethb =>{\r\n        //   if(ethb.id=event.returnValues[0]){\r\n\r\n        //     // console.log(\"THIS IS IT\", index);\r\n        //     var returnSVG =  returnContract.methods.generateEtherbrightsSVG(event.returnValues[0]).call()\r\n        //     // this.setState()\r\n        //     // let tmparray=this.state.etherbrights.slice();\r\n        //     // tmparray[id][svg]=returnSVG;\r\n        //     // setarray(tmparray);\r\n\r\n        //   }\r\n\r\n        //   }\r\n        //   )\r\n\r\n      })\r\n      .on('error', console.error)\r\n\r\n      // returnContract.events.PixelChanged()\r\n      // .on('data', (event) => {\r\n      //   console.log(\"PIXEL CHANGED EVENT \",event.returnValues[0]);\r\n\r\n      // })\r\n      // .on('error', console.error)\r\n\r\n\r\n\r\n      // returnContract.events.EtherbrightMinted()\r\n      // .on('data', (event) => {\r\n      //   console.log(\"Etherbright Minted \",event);\r\n      //     var ethb=new Etherbright(event.returnValues[0],event.returnValues[1]);\r\n      //   this.setState({\r\n      //     etherbrights: [...this.state.etherbrights, ethb]\r\n      //   })\r\n      // })\r\n      // .on('error', console.error)\r\n      returnContract.events.EtherbrightMinted()\r\n      .on('data', (event) => {\r\n        console.log(\"Etherbright Minted \",event);\r\n          var id=event.returnValues[0];\r\n          var owner=event.returnValues[1];\r\n          console.log(\" minted id \",id)\r\n\r\n          var pixels=[];\r\n          var svg=\"tmp\";\r\n          var waiting=1;\r\n          var ethb=new Etherbright(); \r\n          ethb.id=id;\r\n          ethb.owner=owner;\r\n          var proms=[];\r\n          var pixelColors=[];\r\n          // returnContract.methods.getEtherbrightPallet(id).call().then(function(result){ethb.pallet=result;console.log(\"PALLET \",result)});\r\n          // returnContract.methods.getEtherbrightPixels(id).call().then(function(result){pixelColors=result;console.log(\"PALLET \",result)});\r\n          proms.push(returnContract.methods.getEtherbrightPallet(id).call());\r\n          proms.push(returnContract.methods.getEtherbrightPixels(id).call());\r\n          var allProms=Promise.all(proms);\r\n            allProms.then((data) => {\r\n              console.log(\"DATA 0\",data[0])\r\n              ethb.pallet=data[0];\r\n              console.log(\"ethb.pallet \",ethb.pallet)\r\n\r\n              console.log(\"ALL PROMS ID \",ethb.id); \r\n                var xoff=50;\r\n               var yoff=50;\r\n                var p=0;\r\n                var pixels=[];\r\n                for(var x=1; x<=5; x++){\r\n                  for(var y=1; y<=5; y++){\r\n                    pixels.push(new Pixel(p,xoff*x,yoff*y,data[1][p]))\r\n                    p++;\r\n                  }\r\n                }\r\n              ethb.pixels=pixels;\r\n\r\n              console.log(\"PIX \",ethb.pixels);\r\n              console.log(\"PALLET \",ethb.pallet);\r\n\r\n              // ethb.svg=generateSvg(ethb.id,ethb.pixels);\r\n              this.setState({\r\n              etherbrights: [...this.state.etherbrights, ethb]\r\n              })\r\n            })\r\n\r\n          // for(var p=0; p<24; p++){\r\n          //  proms.push(returnContract.methods.getEtherbrightPixelColor(id,p).call())\r\n          // }\r\n\r\n          // var allProms=Promise.all(proms);\r\n          //   allProms.then((data) => {\r\n\r\n          //     console.log(\"ALL PROMS ID \",ethb.id); \r\n          //       var xoff=50;\r\n          //      var yoff=50;\r\n          //       var p=0;\r\n          //       var pixels=[];\r\n          //       for(var x=1; x<=5; x++){\r\n          //         for(var y=1; y<=5; y++){\r\n          //           pixels.push(new Pixel(p,xoff*x,yoff*y,data[p]))\r\n          //           p++;\r\n          //         }\r\n          //       }\r\n          //     ethb.pixels=pixels;\r\n\r\n          //     console.log(\"PIX \",ethb.pixels);\r\n          //     console.log(\"PALLET \",ethb.pallet);\r\n\r\n          //     ethb.svg=generateSvg(ethb.id,ethb.pixels);\r\n          //     this.setState({\r\n          //     etherbrights: [...this.state.etherbrights, ethb]\r\n          //     })\r\n          //   })\r\n\r\n\r\n            //     var xoff=50;\r\n            //    var yoff=50;\r\n            //     var p=0;\r\n            //     var pixels=[];\r\n            //     for(var x=1; x<=5; x++){\r\n            //       for(var y=1; y<=5; y++){\r\n            //         pixels.push(new Pixel(p,xoff*x,yoff*y,pixelColors[p]))\r\n            //         p++;\r\n            //       }\r\n            //     }\r\n            //   ethb.pixels=pixels;\r\n            //   console.log(\"PIX \",ethb.pixels);\r\n            //   console.log(\"PALLET \",ethb.pallet);\r\n\r\n            //   ethb.svg=generateSvg(ethb.id,ethb.pixels);\r\n            //   this.setState({\r\n            //   etherbrights: [...this.state.etherbrights, ethb]\r\n            // })\r\n   \r\n      })\r\n      .on('error', console.error)\r\n\r\n\r\n\r\n\r\n      returnContract.events.Transfer()\r\n      .on('data', (event) =>{console.log(\"GOT EVENT\");console.log(event);})\r\n      .on('error',console.error);\r\n\r\n      // returnContract.getPastEvents('PixelChanged', {\r\n      //     fromBlock: 0,\r\n      //     toBlock: 'latest'\r\n      // }, function(error, events){ console.log(events); })\r\n      // .then(function(events){\r\n      //     console.log(events) // same results as the optional callback above\r\n      // });\r\n\r\n\r\n      // returnContract.getPastEvents('SVGgenerated', {\r\n      //     fromBlock: 0,\r\n      //     toBlock: 'latest'\r\n      // }, function(error, events){ \r\n      //     console.log(events); \r\n      //     // returnSVG= returnContract.methods.generateSVG().call();\r\n      //     // this.setState({svg:returnSVG});\r\n\r\n      //    })\r\n      // .then(function(events){\r\n      //     console.log(events) // same results as the optional callback above\r\n      // });\r\n\r\n\r\n\r\n      // Load Colors\r\n      // for (var i = 1; i <= returntotalSupply; i++) {\r\n      //   const color = await returnContract.methods.colors(i - 1).call()\r\n      //   this.setState({\r\n      //     colors: [...this.state.colors, color]\r\n      //   })\r\n      // }\r\n      // var _svgmap = new Map();\r\n      for (var i = 1; i <= returntotalSupply; i++) {\r\n      var ethb=new Etherbright();\r\n\r\n        var ethbID = await returnContract.methods.tokenByIndex(i - 1).call()\r\n        var owner =await returnContract.methods.ownerOf(ethbID).call();\r\n        ethb.id=ethbID;\r\n        ethb.owner=owner;\r\n        var proms=[];\r\n        var pixels=[];\r\n              // console.log(\" startup ALL PROMS ID 1\",ethb.id); \r\n\r\n        // for(var p=0; p<24; p++){\r\n        //   proms.push(returnContract.methods.getEtherbrightPixelColor(ethb.id,p).call())\r\n        // }\r\n        proms.push(returnContract.methods.getEtherbrightPixels(ethbID).call());\r\n        var allProms=Promise.all(proms);\r\n            allProms.then((data) => {\r\n\r\n              // console.log(\" startup ALL PROMS ID 2\",ethbID); \r\n                var xoff=50;\r\n                var yoff=50;\r\n                var p=0;\r\n                var pixels=[];\r\n                for(var x=1; x<=5; x++){\r\n                  for(var y=1; y<=5; y++){\r\n                    pixels.push(new Pixel(p,xoff*x,yoff*y,data[0][p]))\r\n                    p++;\r\n                  }\r\n                }\r\n              ethb.pixels=pixels;\r\n              // console.log(\"PIX \",ethb.pixels);\r\n              ethb.svg=generateSvg(ethb.id,ethb.pixels);\r\n              ethb.id=ethbID;\r\n              ethb.owner=owner;\r\n\r\n              this.setState({\r\n                etherbrights: [...this.state.etherbrights, ethb]\r\n              })\r\n              // console.log(\"prom data \",data);\r\n              // console.log(\"supply \",this.state.totalSupply);\r\n\r\n              // console.log(\"generateSVG  \", ethb.svg)\r\n            },ethbID)\r\n\r\n\r\n      }\r\n      // this.setState({SVGmap:_svgmap})\r\n      // console.log(\"allsvgs\",this.state.allSVGs)\r\n      // console.log(\"MAP\", this.state.svgmap)\r\n    } else {\r\n      window.alert('Smart contract not deployed to detected network.')\r\n    }\r\n  }\r\n\r\n\r\n\r\n  //javascript arrow function =>\r\n  // () define the list of pramaters followed by \"fat arrow\" => and {} that delimit the functions body\r\n  // ... is spread syntax which expands an iterable like an array or string \r\n  //\r\n  // this callwebs the mint method in the contract with seend passing the accout\r\n  // .once is a promiss event that watches for events like'receipt' and then can call a function with it\r\n  // when we get a receipt event we call setstate and add the color we justed mined to the list\r\n  \r\n// //#dc34eb\r\n//   mint = (color) => {\r\n//     this.state.contract.methods\r\n//         // this.state.contract\r\n\r\n//     .mint(color)\r\n//     .send({ from: this.state.account })\r\n//     .once('receipt',\r\n//        (receipt) => {\r\n//           this.setState(\r\n//             {\r\n//             colors: [...this.state.colors, color]\r\n//             }\r\n//           )\r\n//         }\r\n//     )\r\n//   }\r\n\r\nmint = (color) => {\r\n  this.state.contract.methods.mint(color)\r\n  .send({from: this.state.account, gas:3000000 })//gas must be set with each call for Ganche-cli\r\n  .on('receipt',\r\n     (receipt) => {\r\n      // console.log(\"got mints receipt\")\r\n        this.setState(\r\n          {\r\n          colors: [...this.state.colors, color]\r\n          }\r\n        )\r\n      }\r\n  )\r\n}\r\n setMethod(newstate){\r\n   var _etherbrights = Object.assign(this.state.etherbrights);\r\n          _etherbrights[1].svg=\"<svg width='100' height='100'><circle cx='50' cy='50' r='20' fill='#ffff00' strokeWidth='9' stroke='black'/></svg>\";\r\n                  console.log(\"SETSTAT\",_etherbrights)\r\n\r\n  this.setState({etherbrights  :[] });\r\n  this.setState({etherbrights:_etherbrights });\r\n  // this.setState(this.state);\r\n  console.log(\"SET METHOD\");\r\n}\r\nmintEtherbright = ()=>{\r\n  this.state.contract.methods.mintEtherbright(this.state.account)\r\n  .send({from: this.state.account ,gas:3000000})\r\n}\r\n\r\n\r\nsetPixelColor = (n, color) =>{\r\n  this.state.contract.methods.setPixel(n, color)\r\n  .send({from: this.state.account, gas:3000000})\r\n\r\n}\r\n\r\nsetEtherbrightPixelColor = (id, pixn, paln) => {\r\n  this.state.contract.methods.setEtherbrightPixel(id, pixn, paln)\r\n  .send({from: this.state.account, gas:3000000})\r\n}\r\n\r\ntestsvgonclick=(e,id)=>{\r\n  console.log(\"Pix N \",e.target.getAttributeNS(null,\"pn\"))\r\n  console.log(\"Color \",e.target.getAttributeNS(null,\"fill\"))\r\n  console.log(\"ID \",e.target.getAttributeNS(null,\"id\"))\r\n  // window.App.setEtherbrightPixelColor(e.target.getAttributeNS(null,\"id\"),0,0)\r\n\r\n}\r\ngetAllTokenId = ()=>{\r\n  // var nTokens=this.state.contract.methods.totalSupply().call();\r\n  // for (var i = 0; i <nTokens; i++) {\r\n  //   console.log(\"getalldis \",i)\r\n  // }\r\n  this.state.contract.methods.totalSupply().call()\r\n  .then(\r\n      function(totalSupply){\r\n        console.log(\"Total Supply with a promise:\",  totalSupply);\r\n      }\r\n      )\r\n}\r\n\r\nupdate=()=>{this.forceUpdate();\r\nconsole.log(this.state.etherbrights)}\r\n  // mint = (color) => {\r\n  //   this.state.contract.mint(color)\r\n  //   .call({from: this.state.account})\r\n  //   .once('receipt',\r\n  //      (receipt) => {\r\n  //         this.setState(\r\n  //           {\r\n  //           colors: [...this.state.colors, color]\r\n  //           }\r\n  //         )\r\n  //       }\r\n  //   )\r\n  // }\r\n\r\n\r\n\r\nrender() {\r\n  return (\r\n    <div>\r\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n        <a\r\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\r\n          href=\"http://www.TheEverbright.com\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Etherbright\r\n        </a>\r\n        <ul className=\"navbar-nav px-3\">\r\n          <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\r\n            <small className=\"text-white\"><span id=\"account\">{this.state.account}</span></small>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n      <div className=\"container-fluid mt-5\">\r\n        <div className=\"row\">\r\n          <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\r\n            <div className=\"content mr-auto ml-auto\">\r\n              <h1>setPixelColor</h1>\r\n              <form onSubmit={(event) => {\r\n                event.preventDefault()\r\n                const color = this.color.value\r\n                const n = this.n.value\r\n                this.setPixelColor(n,color)\r\n              }}>\r\n                <input\r\n                  type='text'\r\n                  className='form-control mb-1'\r\n                  placeholder='e.g. #FFFFFF'\r\n                  ref={(input) => { this.color = input }}\r\n                />\r\n                <input\r\n                  type='text'\r\n                  className='form-control mb-1'\r\n                  placeholder='pixel number'\r\n                  ref={(input) => { this.n = input }}\r\n                />\r\n                <input\r\n                  type='submit'\r\n                  className='btn btn-block btn-primary'\r\n                  value='SET PIXEL COLOR'\r\n                />\r\n              </form>\r\n            </div>\r\n          </main>\r\n        </div>\r\n          <hr/>\r\n          <button onClick={this.mintEtherbright}>mint etherbright</button>\r\n          <hr/>\r\n          <button onClick={this.getAllTokenId}>get all token ID</button>\r\n           <hr/>\r\n          <button onClick={this.update}>update</button>\r\n          {/*\r\n          <hr/>\r\n          <h1>JUNK</h1>\r\n          <div dangerouslySetInnerHTML={{__html: this.state.svg }} />\r\n          <hr/>\r\n          <div dangerouslySetInnerHTML={{__html: this.state.allSVGs }} />\r\n          <h1>more 2JUNK</h1>\r\n            <svg width='100' height='100'>\r\n            <circle cx='50' cy='50' r='20' fill='#ffff00' strokeWidth='9' stroke='black'/>\r\n            </svg>\r\n          <hr/>\r\n        */}\r\n\r\n\r\n\r\n\r\n        <div className=\"row text-center\">\r\n\r\n\r\n          <div>\r\n\r\n\r\n\r\n            {this.state.etherbrights.map(ethb => (\r\n              <div id=\"parent\">\r\n              <hr/>\r\n                <EthbDisplay id={ethb.id} owner={ethb.owner} pixels={ethb.pixels} setmethod={(id,pixn,paln)=>this.setEtherbrightPixelColor(id,pixn,paln)} testsvg={(e,id)=>this.testsvgonclick(e,id)}/>\r\n              </div>\r\n            ))}\r\n\r\n          </div>\r\n\r\n\r\n        {/*  { this.state.colors.map(\r\n            (color, key) => {\r\n              return(\r\n                <div key={key} className=\"col-md-3 mb-3\">\r\n                  <div className=\"token\" style={{ backgroundColor: color }}></div>\r\n                  <div>{color}</div>\r\n                </div>\r\n              )\r\n            })\r\n          }\r\n          */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n }\r\n}\r\n\r\nclass EthbDisplay extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    // this.testsvgonclick=this.testsvgonclick.bind(this);\r\n    this.state={\r\n      id: props.id,\r\n      pixels: props.pixels,\r\n      owner: props.owner,\r\n\r\n    };\r\n  }\r\n  componentWillReceiveProps(newProps){\r\n      this.setState({\r\n          location: newProps.location\r\n      })\r\n  }\r\n  getAllColors(){\r\n    console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\")\r\n    return (this.state.pixels.color.map())\r\n  }\r\n\r\n  getCircle(n,x,y,c){\r\n    return(\r\n            <circle id={this.state.id.toHexString()} pn={n} cx={x} cy={y} r='20' fill={c} strokeWidth='8' stroke='black' onClick  ={(e) => {this.props.testsvg(e);}}/>\r\n      )\r\n  }\r\n  render(){\r\n    return(\r\n      <div >\r\n            <svg width='300' height='300'>\r\n            {this.state.pixels.map(pix=>(this.getCircle(pix.id, pix.xpos, pix.ypos, pix.color) ))}\r\n            </svg>\r\n                      <div align=\"left\">\r\n            <h5>Etherbright id:</h5> <h6> {this.state.id.toHexString()}</h6>\r\n            <br/>\r\n            <h5>Etherbright owner:</h5> {this.state.owner}\r\n            </div>  \r\n              <CirclePicker colors={this.getAllColors()}/>\r\n\r\n\r\n              \r\n\r\n            \r\n              <h3>setPixelColor</h3>\r\n              <form onSubmit={(event) => {\r\n                event.preventDefault()\r\n                const paln = this.paln.value\r\n                const pixn = this.pixn.value\r\n                const id = this.state.id\r\n                this.props.setmethod(this.state.id,pixn,paln)\r\n              }}>\r\n                <input\r\n                  type='text'\r\n                  className='form-control mb-1'\r\n                  placeholder='pixel number'\r\n                  ref={(input) => { this.pixn = input }}\r\n                />\r\n                <input\r\n                  type='text'\r\n                  className='form-control mb-1'\r\n                  placeholder='pallent n'\r\n                  ref={(input) => { this.paln = input }}\r\n                />\r\n                <input\r\n                  type='submit'\r\n                  className='btn btn-block btn-primary'\r\n                  value='SET PIXEL COLOR'\r\n                />\r\n              </form>\r\n      <button className=\"button\" onClick={() => alert(this.state.id)}>\r\n      </button>\r\n          <hr/>\r\n          </div>\r\n      );\r\n    }\r\n}\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}