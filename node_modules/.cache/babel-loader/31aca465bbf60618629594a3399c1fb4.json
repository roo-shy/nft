{"ast":null,"code":"import _slicedToArray from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _wrapNativeSuper from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/wrapNativeSuper\";\nexport var InternMap = /*#__PURE__*/function (_Map) {\n  _inherits(InternMap, _Map);\n\n  function InternMap(entries) {\n    var _this;\n\n    var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : keyof;\n\n    _classCallCheck(this, InternMap);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InternMap).call(this));\n    Object.defineProperties(_assertThisInitialized(_assertThisInitialized(_this)), {\n      _intern: {\n        value: new Map()\n      },\n      _key: {\n        value: key\n      }\n    });\n\n    if (entries != null) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = entries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              _key2 = _step$value[0],\n              value = _step$value[1];\n\n          _this.set(_key2, value);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    return _this;\n  }\n\n  _createClass(InternMap, [{\n    key: \"get\",\n    value: function get(key) {\n      return _get(_getPrototypeOf(InternMap.prototype), \"get\", this).call(this, intern_get(this, key));\n    }\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      return _get(_getPrototypeOf(InternMap.prototype), \"has\", this).call(this, intern_get(this, key));\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      return _get(_getPrototypeOf(InternMap.prototype), \"set\", this).call(this, intern_set(this, key), value);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      return _get(_getPrototypeOf(InternMap.prototype), \"delete\", this).call(this, intern_delete(this, key));\n    }\n  }]);\n\n  return InternMap;\n}(_wrapNativeSuper(Map));\nexport var InternSet = /*#__PURE__*/function (_Set) {\n  _inherits(InternSet, _Set);\n\n  function InternSet(values) {\n    var _this2;\n\n    var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : keyof;\n\n    _classCallCheck(this, InternSet);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(InternSet).call(this));\n    Object.defineProperties(_assertThisInitialized(_assertThisInitialized(_this2)), {\n      _intern: {\n        value: new Map()\n      },\n      _key: {\n        value: key\n      }\n    });\n\n    if (values != null) {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = values[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var value = _step2.value;\n\n          _this2.add(value);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n    return _this2;\n  }\n\n  _createClass(InternSet, [{\n    key: \"has\",\n    value: function has(value) {\n      return _get(_getPrototypeOf(InternSet.prototype), \"has\", this).call(this, intern_get(this, value));\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      return _get(_getPrototypeOf(InternSet.prototype), \"add\", this).call(this, intern_set(this, value));\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(value) {\n      return _get(_getPrototypeOf(InternSet.prototype), \"delete\", this).call(this, intern_delete(this, value));\n    }\n  }]);\n\n  return InternSet;\n}(_wrapNativeSuper(Set));\n\nfunction intern_get(_ref, value) {\n  var _intern = _ref._intern,\n      _key = _ref._key;\n\n  var key = _key(value);\n\n  return _intern.has(key) ? _intern.get(key) : value;\n}\n\nfunction intern_set(_ref2, value) {\n  var _intern = _ref2._intern,\n      _key = _ref2._key;\n\n  var key = _key(value);\n\n  if (_intern.has(key)) return _intern.get(key);\n\n  _intern.set(key, value);\n\n  return value;\n}\n\nfunction intern_delete(_ref3, value) {\n  var _intern = _ref3._intern,\n      _key = _ref3._key;\n\n  var key = _key(value);\n\n  if (_intern.has(key)) {\n    value = _intern.get(value);\n\n    _intern.delete(key);\n  }\n\n  return value;\n}\n\nfunction keyof(value) {\n  return value !== null && typeof value === \"object\" ? value.valueOf() : value;\n}","map":null,"metadata":{},"sourceType":"module"}