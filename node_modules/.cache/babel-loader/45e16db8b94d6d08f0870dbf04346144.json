{"ast":null,"code":"import _regeneratorRuntime from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"H:\\\\Expermental\\\\nft\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react'; // import { ReactSVG } from 'react-svg'\n// import logo from '../logo.png';\n\nimport './App.css';\nimport Web3 from 'web3';\nimport Color from '../abis/Color.json';\n\nfunction Etherbright(id, svg) {\n  this.id = id;\n  this.svg = svg;\n}\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.mint = function (color) {\n      _this.state.contract.methods.mint(color).send({\n        from: _this.state.account,\n        gas: 3000000\n      }) //gas must be set with each call for Ganche-cli\n      .on('receipt', function (receipt) {\n        // console.log(\"got mints receipt\")\n        _this.setState({\n          colors: [].concat(_toConsumableArray(_this.state.colors), [color])\n        });\n      });\n    };\n\n    _this.mintEtherbright = function () {\n      _this.state.contract.methods.mintEtherbright(_this.state.account).send({\n        from: _this.state.account,\n        gas: 3000000\n      });\n    };\n\n    _this.setPixelColor = function (n, color) {\n      _this.state.contract.methods.setPixel(n, color).send({\n        from: _this.state.account,\n        gas: 3000000\n      });\n    };\n\n    _this.setEtherbrightPixelColor = function (id, pixn, paln) {\n      _this.state.contract.methods.setEtherbrightPixel(id, pixn, paln).send({\n        from: _this.state.account,\n        gas: 3000000\n      });\n    };\n\n    _this.getAllTokenId = function () {\n      // var nTokens=this.state.contract.methods.totalSupply().call();\n      // for (var i = 0; i <nTokens; i++) {\n      //   console.log(\"getalldis \",i)\n      // }\n      _this.state.contract.methods.totalSupply().call().then(function (totalSupply) {\n        console.log(\"Total Supply with a promise:\", totalSupply);\n      });\n    };\n\n    _this.state = {\n      account: '',\n      contract: null,\n      totalSupply: 1,\n      svg: '',\n      colors: [],\n      etherbrights: [],\n      etherbrightIDs: [],\n      allSVGs: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(\"loadWeb3\");\n\n                if (!window.ethereum) {\n                  _context.next = 8;\n                  break;\n                }\n\n                console.log(\"loadWeb3  ETH\"); // window.web3 = new Web3(window.ethereum)\n\n                window.web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8545'));\n                _context.next = 6;\n                return window.ethereum.enable();\n\n              case 6:\n                _context.next = 9;\n                break;\n\n              case 8:\n                if (window.web3) {\n                  console.log(\"loadWeb3  WEB3\"); // window.web3 = new Web3(window.web3.currentProvider)\n\n                  window.web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8545'));\n                } else {\n                  window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n                }\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                console.log(\"loadingWeb3\");\n                _context2.next = 3;\n                return this.loadWeb3();\n\n              case 3:\n                console.log(\"loadBlockchainData\");\n                _context2.next = 6;\n                return this.loadBlockchainData();\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        var web3, accounts, networkId, networkData, abi, address, returnContract, testreturn, returntotalSupply, returnSVG, i, ethbID, ethbSVG;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3; // Load account\n\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                //gets accout from metamask\n                this.setState({\n                  account: accounts[0]\n                }); //state store property values of a componet and when the state chages the componet re-renders\n\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                //detercts the eth network \n                networkData = Color.networks[networkId]; //gets the contracts address on the network\n\n                console.log(\"netowrkdata\", networkId);\n\n                if (!networkData) {\n                  _context3.next = 57;\n                  break;\n                }\n\n                //if it has an addres\n                abi = Color.abi; //creates a JS version of the contract with its abi\n\n                address = networkData.address; //its actual address?\n\n                console.log(\"networkData:\", networkData);\n                console.log(\"addy\", address);\n                console.log(\"abi:\", abi);\n                returnContract = new web3.eth.Contract(abi, address); //creates a new version of this contract\n\n                this.setState({\n                  contract: returnContract\n                }); //sets it in state obj\n\n                console.log(\"contract:\", this.state.contract);\n                console.log(\"calling test return\");\n                testreturn = returnContract.methods.testReturn(\"this is a test\").call({\n                  from: this.state.account\n                });\n                console.log(\"testreturn \", testreturn);\n                console.log(\"calling totalssupply\");\n                _context3.next = 25;\n                return returnContract.methods.totalSupply().call();\n\n              case 25:\n                returntotalSupply = _context3.sent;\n                //calls a contracts method\n                console.log(\"returntotalsupply\", returntotalSupply.toString());\n                console.log(\"state total supply\", this.state.totalSupply);\n                this.setState({\n                  totalSupply: returntotalSupply\n                }); //sets state var\n\n                _context3.next = 31;\n                return returnContract.methods.generateSVG().call();\n\n              case 31:\n                returnSVG = _context3.sent;\n                this.setState({\n                  svg: returnSVG\n                }); // const tmp=\"<svg><circle cx=\"50\" cy=\"50\" r=\"20\" fill=\"#ff0000\" stroke-width=\"9\" stroke=\"black\"/></svg>\"\n                // this.setState({svg:\"<svg width='100' height='100'><circle cx='50' cy='50' r='20' fill='#ffff00' stroke-width='9' stroke='black'/></svg>\"})\n\n                console.log(\"SVG: \", this.state.svg);\n                returnContract.events.SVGgenerated().on('data', function (event) {\n                  console.log(\"SVG EVENT \", event);\n\n                  _this2.setState({\n                    svg: event.returnValues[0]\n                  });\n                }).on('error', console.error);\n                returnContract.events.EtherbrightSVGgenerated().on('data', function (event) {\n                  console.log(\"ETHB SVG EVENT \", event); // this.setState({svg:event.returnValues[0]})\n                }).on('error', console.error);\n                returnContract.events.EtherbrightPixelChanged().on('data', function (event) {\n                  console.log(\"ETHB PIXEL CHANGED EVENT \", event); // this.setState({svg:event.returnValues[0]})\n                  //this.updateEtherbright(event);\n\n                  var id = event.returnValues[0];\n\n                  var index = _this2.state.etherbrights.findIndex(function (x) {\n                    return x.id === id;\n                  });\n\n                  console.log(\"index \", index);\n                  console.log(\"ID \", id);\n\n                  _this2.state.etherbrights.map(function (ethb) {\n                    if (ethb.id = id) {\n                      console.log(\"THIS IS IT\", index);\n                      var returnSVG = returnContract.methods.generateEtherbrightsSVG(id).call(); // this.setState()\n                      // let tmparray=this.state.etherbrights.slice();\n                      // tmparray[id][svg]=returnSVG;\n                      // setarray(tmparray);\n                    }\n                  });\n                }).on('error', console.error);\n                returnContract.events.PixelChanged().on('data', function (event) {\n                  console.log(\"PIXEL CHANGED EVENT \", event.returnValues[0]);\n                }).on('error', console.error);\n                returnContract.events.EtherbrightMinted().on('data', function (event) {\n                  console.log(\"Etherbright Minted \", event);\n                  var ethb = new Etherbright(event.returnValues[0], event.returnValues[1]);\n\n                  _this2.setState({\n                    etherbrights: [].concat(_toConsumableArray(_this2.state.etherbrights), [ethb])\n                  });\n                }).on('error', console.error);\n                returnContract.events.Transfer().on('data', function (event) {\n                  console.log(\"GOT EVENT\");\n                  console.log(event);\n                }).on('error', console.error);\n                returnContract.getPastEvents('PixelChanged', {\n                  fromBlock: 0,\n                  toBlock: 'latest'\n                }, function (error, events) {\n                  console.log(events);\n                }).then(function (events) {\n                  console.log(events); // same results as the optional callback above\n                });\n                returnContract.getPastEvents('SVGgenerated', {\n                  fromBlock: 0,\n                  toBlock: 'latest'\n                }, function (error, events) {\n                  console.log(events); // returnSVG= returnContract.methods.generateSVG().call();\n                  // this.setState({svg:returnSVG});\n                }).then(function (events) {\n                  console.log(events); // same results as the optional callback above\n                }); // Load Colors\n                // for (var i = 1; i <= returntotalSupply; i++) {\n                //   const color = await returnContract.methods.colors(i - 1).call()\n                //   this.setState({\n                //     colors: [...this.state.colors, color]\n                //   })\n                // }\n                // var _svgmap = new Map();\n\n                i = 1;\n\n              case 43:\n                if (!(i <= returntotalSupply)) {\n                  _context3.next = 54;\n                  break;\n                }\n\n                _context3.next = 46;\n                return returnContract.methods.tokenByIndex(i - 1).call();\n\n              case 46:\n                ethbID = _context3.sent;\n                _context3.next = 49;\n                return returnContract.methods.generateEtherbrightsSVG(ethbID).call();\n\n              case 49:\n                ethbSVG = _context3.sent;\n                // console.log(\"svgs: \",returnedSVG)\n                // this.setState({\n                //   allSVGs:[...this.state.allSVGs,returnedSVG]\n                // })\n                // console.log(this.state.allSVGs)\n                // _svgmap.set(ethbID,ethbSVG);\n                this.setState({\n                  etherbrights: [].concat(_toConsumableArray(this.state.etherbrights), [new Etherbright(ethbID, ethbSVG)])\n                });\n\n              case 51:\n                i++;\n                _context3.next = 43;\n                break;\n\n              case 54:\n                // this.setState({SVGmap:_svgmap})\n                console.log(\"allsvgs\", this.state.allSVGs); // console.log(\"MAP\", this.state.svgmap)\n\n                _context3.next = 58;\n                break;\n\n              case 57:\n                window.alert('Smart contract not deployed to detected network.');\n\n              case 58:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }() //javascript arrow function =>\n    // () define the list of pramaters followed by \"fat arrow\" => and {} that delimit the functions body\n    // ... is spread syntax which expands an iterable like an array or string \n    //\n    // this callwebs the mint method in the contract with seend passing the accout\n    // .once is a promiss event that watches for events like'receipt' and then can call a function with it\n    // when we get a receipt event we call setstate and add the color we justed mined to the list\n    // //#dc34eb\n    //   mint = (color) => {\n    //     this.state.contract.methods\n    //         // this.state.contract\n    //     .mint(color)\n    //     .send({ from: this.state.account })\n    //     .once('receipt',\n    //        (receipt) => {\n    //           this.setState(\n    //             {\n    //             colors: [...this.state.colors, color]\n    //             }\n    //           )\n    //         }\n    //     )\n    //   }\n\n  }, {\n    key: \"render\",\n    // mint = (color) => {\n    //   this.state.contract.mint(color)\n    //   .call({from: this.state.account})\n    //   .once('receipt',\n    //      (receipt) => {\n    //         this.setState(\n    //           {\n    //           colors: [...this.state.colors, color]\n    //           }\n    //         )\n    //       }\n    //   )\n    // }\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"navbar-brand col-sm-3 col-md-2 mr-0\",\n        href: \"http://www.TheEverbright.com\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }, \"Etherbright\"), React.createElement(\"ul\", {\n        className: \"navbar-nav px-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: \"nav-item text-nowrap d-none d-sm-none d-sm-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        className: \"text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        id: \"account\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325\n        },\n        __self: this\n      }, this.state.account))))), React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330\n        },\n        __self: this\n      }, React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 d-flex text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333\n        },\n        __self: this\n      }, \"setPixelColor\"), React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          event.preventDefault();\n          var color = _this3.color.value;\n          var n = _this3.n.value;\n\n          _this3.setPixelColor(n, color);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control mb-1\",\n        placeholder: \"e.g. #FFFFFF\",\n        ref: function ref(input) {\n          _this3.color = input;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control mb-1\",\n        placeholder: \"pixel number\",\n        ref: function ref(input) {\n          _this3.n = input;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        className: \"btn btn-block btn-primary\",\n        value: \"SET PIXEL COLOR\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352\n        },\n        __self: this\n      }))))), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.mintEtherbright,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362\n        },\n        __self: this\n      }, \"mint etherbright\"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.getAllTokenId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364\n        },\n        __self: this\n      }, \"get all token ID\"), React.createElement(\"div\", {\n        className: \"row text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384\n        },\n        __self: this\n      }, this.state.etherbrights.map(function (ethb) {\n        return React.createElement(\"div\", {\n          id: \"parent\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 389\n          },\n          __self: this\n        }, React.createElement(\"hr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 390\n          },\n          __self: this\n        }), React.createElement(EthbDisplay, {\n          id: ethb.id,\n          svg: ethb.svg,\n          setmethod: function setmethod(id, pixn, paln) {\n            return _this3.setEtherbrightPixelColor(id, pixn, paln);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 391\n          },\n          __self: this\n        }));\n      })))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nvar EthbDisplay = /*#__PURE__*/function (_Component2) {\n  _inherits(EthbDisplay, _Component2);\n\n  function EthbDisplay(props) {\n    var _this4;\n\n    _classCallCheck(this, EthbDisplay);\n\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(EthbDisplay).call(this, props));\n    _this4.state = {\n      id: props.id,\n      svg: props.svg\n    };\n    return _this4;\n  }\n\n  _createClass(EthbDisplay, [{\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 427\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 428\n        },\n        __self: this\n      }, \"ETHBDISPLAY\"), React.createElement(\"div\", {\n        dangerouslySetInnerHTML: {\n          __html: this.state.svg\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429\n        },\n        __self: this\n      }), \"Etherbright id: \", this.state.id.toString(), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431\n        },\n        __self: this\n      }, \"setPixelColor\"), React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          event.preventDefault();\n          var paln = _this5.paln.value;\n          var pixn = _this5.pixn.value;\n          var id = _this5.state.id;\n\n          _this5.props.setmethod(_this5.state.id, pixn, paln);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 432\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control mb-1\",\n        placeholder: \"pallent n\",\n        ref: function ref(input) {\n          _this5.paln = input;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control mb-1\",\n        placeholder: \"pixel number\",\n        ref: function ref(input) {\n          _this5.pixn = input;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 445\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        className: \"btn btn-block btn-primary\",\n        value: \"SET PIXEL COLOR\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 451\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        className: \"button\",\n        onClick: function onClick() {\n          return alert(_this5.state.id);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 457\n        },\n        __self: this\n      }), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 459\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return EthbDisplay;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["H:/Expermental/nft/src/components/App.js"],"names":["React","Component","Web3","Color","Etherbright","id","svg","App","props","mint","color","state","contract","methods","send","from","account","gas","on","receipt","setState","colors","mintEtherbright","setPixelColor","n","setPixel","setEtherbrightPixelColor","pixn","paln","setEtherbrightPixel","getAllTokenId","totalSupply","call","then","console","log","etherbrights","etherbrightIDs","allSVGs","window","ethereum","web3","providers","WebsocketProvider","enable","alert","loadWeb3","loadBlockchainData","eth","getAccounts","accounts","net","getId","networkId","networkData","networks","abi","address","returnContract","Contract","testreturn","testReturn","returntotalSupply","toString","generateSVG","returnSVG","events","SVGgenerated","event","returnValues","error","EtherbrightSVGgenerated","EtherbrightPixelChanged","index","findIndex","x","map","ethb","generateEtherbrightsSVG","PixelChanged","EtherbrightMinted","Transfer","getPastEvents","fromBlock","toBlock","i","tokenByIndex","ethbID","ethbSVG","preventDefault","value","input","EthbDisplay","__html","setmethod"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n// import { ReactSVG } from 'react-svg'\r\n// import logo from '../logo.png';\r\nimport './App.css';\r\nimport Web3 from 'web3';\r\nimport Color from '../abis/Color.json'\r\n\r\nfunction Etherbright(id, svg,){\r\n  this.id=id;\r\n  this.svg=svg;\r\n\r\n}\r\n\r\n    \r\n\r\n  \r\n\r\nclass App extends Component {\r\n\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state={\r\n      account:'',\r\n      contract: null,\r\n      totalSupply: 1,\r\n      svg:'', \r\n      colors: [],\r\n      etherbrights: [],\r\n      etherbrightIDs: [],\r\n      allSVGs: [],\r\n\r\n    }\r\n  }\r\n\r\n  async loadWeb3() {\r\n      console.log(\"loadWeb3\");\r\n\r\n    if (window.ethereum) {\r\n            console.log(\"loadWeb3  ETH\");\r\n\r\n      // window.web3 = new Web3(window.ethereum)\r\n            window.web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8545'))\r\n\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n                  console.log(\"loadWeb3  WEB3\");\r\n\r\n      // window.web3 = new Web3(window.web3.currentProvider)\r\n      window.web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8545'))\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n  }\r\n\r\n  async componentWillMount() {\r\n    console.log(\"loadingWeb3\")\r\n    await this.loadWeb3()\r\n    console.log(\"loadBlockchainData\")\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts() //gets accout from metamask\r\n    this.setState({ account: accounts[0] })//state store property values of a componet and when the state chages the componet re-renders\r\n    const networkId = await web3.eth.net.getId() //detercts the eth network \r\n    const networkData = Color.networks[networkId] //gets the contracts address on the network\r\n    console.log(\"netowrkdata\",networkId)\r\n    if(networkData) {//if it has an addres\r\n      const abi = Color.abi //creates a JS version of the contract with its abi\r\n      const address = networkData.address //its actual address?\r\n      console.log(\"networkData:\",networkData);\r\n      console.log(\"addy\",address);\r\n      console.log(\"abi:\",abi);\r\n\r\n      const returnContract = new web3.eth.Contract(abi, address)//creates a new version of this contract\r\n      this.setState({ contract:returnContract })//sets it in state obj\r\n      console.log(\"contract:\",this.state.contract)\r\n      console.log(\"calling test return\")\r\n      const testreturn=returnContract.methods.testReturn(\"this is a test\").call({from: this.state.account})\r\n      console.log(\"testreturn \",testreturn)\r\n      console.log(\"calling totalssupply\")\r\n      const returntotalSupply = await returnContract.methods.totalSupply().call()//calls a contracts method\r\n      console.log(\"returntotalsupply\",returntotalSupply.toString())\r\n      console.log(\"state total supply\",this.state.totalSupply)\r\n      this.setState({ totalSupply:returntotalSupply }) //sets state var\r\n      var returnSVG = await returnContract.methods.generateSVG().call()\r\n      this.setState({svg:returnSVG})\r\n      // const tmp=\"<svg><circle cx=\"50\" cy=\"50\" r=\"20\" fill=\"#ff0000\" stroke-width=\"9\" stroke=\"black\"/></svg>\"\r\n\r\n      // this.setState({svg:\"<svg width='100' height='100'><circle cx='50' cy='50' r='20' fill='#ffff00' stroke-width='9' stroke='black'/></svg>\"})\r\n      console.log(\"SVG: \",this.state.svg)\r\n\r\n\r\n      returnContract.events.SVGgenerated()\r\n      .on('data', (event) => {\r\n        console.log(\"SVG EVENT \",event);\r\n        this.setState({svg:event.returnValues[0]})\r\n      })\r\n      .on('error', console.error)\r\n\r\n      returnContract.events.EtherbrightSVGgenerated()\r\n      .on('data', (event) => {\r\n        console.log(\"ETHB SVG EVENT \",event);\r\n        // this.setState({svg:event.returnValues[0]})\r\n      })\r\n      .on('error', console.error)\r\n\r\n      returnContract.events.EtherbrightPixelChanged()\r\n      .on('data', (event) => {\r\n        console.log(\"ETHB PIXEL CHANGED EVENT \",event);\r\n        // this.setState({svg:event.returnValues[0]})\r\n        //this.updateEtherbright(event);\r\n        const id=event.returnValues[0];\r\n        var index = this.state.etherbrights.findIndex(x=> x.id === id);\r\n          console.log(\"index \",index);\r\n          console.log(\"ID \",id);\r\n\r\n        this.state.etherbrights.map(ethb =>{\r\n          if(ethb.id=id){\r\n\r\n            console.log(\"THIS IS IT\", index);\r\n            var returnSVG =  returnContract.methods.generateEtherbrightsSVG(id).call()\r\n            // this.setState()\r\n            // let tmparray=this.state.etherbrights.slice();\r\n            // tmparray[id][svg]=returnSVG;\r\n            // setarray(tmparray);\r\n\r\n          }\r\n\r\n          }\r\n          )\r\n\r\n      })\r\n      .on('error', console.error)\r\n\r\n      returnContract.events.PixelChanged()\r\n      .on('data', (event) => {\r\n        console.log(\"PIXEL CHANGED EVENT \",event.returnValues[0]);\r\n\r\n      })\r\n      .on('error', console.error)\r\n\r\n      returnContract.events.EtherbrightMinted()\r\n      .on('data', (event) => {\r\n        console.log(\"Etherbright Minted \",event);\r\n          var ethb=new Etherbright(event.returnValues[0],event.returnValues[1]);\r\n        this.setState({\r\n          etherbrights: [...this.state.etherbrights, ethb]\r\n        })\r\n      })\r\n      .on('error', console.error)\r\n\r\n      returnContract.events.Transfer()\r\n      .on('data', (event) =>{console.log(\"GOT EVENT\");console.log(event);})\r\n      .on('error',console.error);\r\n\r\n      returnContract.getPastEvents('PixelChanged', {\r\n          fromBlock: 0,\r\n          toBlock: 'latest'\r\n      }, function(error, events){ console.log(events); })\r\n      .then(function(events){\r\n          console.log(events) // same results as the optional callback above\r\n      });\r\n\r\n\r\n      returnContract.getPastEvents('SVGgenerated', {\r\n          fromBlock: 0,\r\n          toBlock: 'latest'\r\n      }, function(error, events){ \r\n          console.log(events); \r\n          // returnSVG= returnContract.methods.generateSVG().call();\r\n          // this.setState({svg:returnSVG});\r\n\r\n         })\r\n      .then(function(events){\r\n          console.log(events) // same results as the optional callback above\r\n      });\r\n\r\n\r\n\r\n      // Load Colors\r\n      // for (var i = 1; i <= returntotalSupply; i++) {\r\n      //   const color = await returnContract.methods.colors(i - 1).call()\r\n      //   this.setState({\r\n      //     colors: [...this.state.colors, color]\r\n      //   })\r\n      // }\r\n      // var _svgmap = new Map();\r\n      for (var i = 1; i <= returntotalSupply; i++) {\r\n\r\n        var ethbID = await returnContract.methods.tokenByIndex(i - 1).call()\r\n        // console.log(\"etcbs: \",ethb)\r\n        // this.setState({\r\n        //   etherbrightIDs: [...this.state.etherbrightIDs, ethb]\r\n        // })\r\n        \r\n        var ethbSVG = await returnContract.methods.generateEtherbrightsSVG(ethbID).call()\r\n        // console.log(\"svgs: \",returnedSVG)\r\n\r\n        // this.setState({\r\n        //   allSVGs:[...this.state.allSVGs,returnedSVG]\r\n        // })\r\n        // console.log(this.state.allSVGs)\r\n        // _svgmap.set(ethbID,ethbSVG);\r\n        this.setState({\r\n          etherbrights:[...this.state.etherbrights,new Etherbright(ethbID,ethbSVG)]\r\n        })\r\n\r\n      }\r\n      // this.setState({SVGmap:_svgmap})\r\n      console.log(\"allsvgs\",this.state.allSVGs)\r\n      // console.log(\"MAP\", this.state.svgmap)\r\n    } else {\r\n      window.alert('Smart contract not deployed to detected network.')\r\n    }\r\n  }\r\n\r\n\r\n  //javascript arrow function =>\r\n  // () define the list of pramaters followed by \"fat arrow\" => and {} that delimit the functions body\r\n  // ... is spread syntax which expands an iterable like an array or string \r\n  //\r\n  // this callwebs the mint method in the contract with seend passing the accout\r\n  // .once is a promiss event that watches for events like'receipt' and then can call a function with it\r\n  // when we get a receipt event we call setstate and add the color we justed mined to the list\r\n  \r\n// //#dc34eb\r\n//   mint = (color) => {\r\n//     this.state.contract.methods\r\n//         // this.state.contract\r\n\r\n//     .mint(color)\r\n//     .send({ from: this.state.account })\r\n//     .once('receipt',\r\n//        (receipt) => {\r\n//           this.setState(\r\n//             {\r\n//             colors: [...this.state.colors, color]\r\n//             }\r\n//           )\r\n//         }\r\n//     )\r\n//   }\r\n\r\nmint = (color) => {\r\n  this.state.contract.methods.mint(color)\r\n  .send({from: this.state.account, gas:3000000 })//gas must be set with each call for Ganche-cli\r\n  .on('receipt',\r\n     (receipt) => {\r\n      // console.log(\"got mints receipt\")\r\n        this.setState(\r\n          {\r\n          colors: [...this.state.colors, color]\r\n          }\r\n        )\r\n      }\r\n  )\r\n}\r\n\r\nmintEtherbright = ()=>{\r\n  this.state.contract.methods.mintEtherbright(this.state.account)\r\n  .send({from: this.state.account ,gas:3000000})\r\n}\r\n\r\n\r\nsetPixelColor = (n, color) =>{\r\n  this.state.contract.methods.setPixel(n, color)\r\n  .send({from: this.state.account, gas:3000000})\r\n\r\n}\r\n\r\nsetEtherbrightPixelColor = (id, pixn, paln) => {\r\n  this.state.contract.methods.setEtherbrightPixel(id, pixn, paln)\r\n  .send({from: this.state.account, gas:3000000})\r\n}\r\ngetAllTokenId = ()=>{\r\n  // var nTokens=this.state.contract.methods.totalSupply().call();\r\n  // for (var i = 0; i <nTokens; i++) {\r\n  //   console.log(\"getalldis \",i)\r\n  // }\r\n  this.state.contract.methods.totalSupply().call()\r\n  .then(\r\n      function(totalSupply){\r\n        console.log(\"Total Supply with a promise:\",  totalSupply);\r\n      }\r\n      )\r\n}\r\n  // mint = (color) => {\r\n  //   this.state.contract.mint(color)\r\n  //   .call({from: this.state.account})\r\n  //   .once('receipt',\r\n  //      (receipt) => {\r\n  //         this.setState(\r\n  //           {\r\n  //           colors: [...this.state.colors, color]\r\n  //           }\r\n  //         )\r\n  //       }\r\n  //   )\r\n  // }\r\n\r\n\r\n\r\nrender() {\r\n  return (\r\n    <div>\r\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n        <a\r\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\r\n          href=\"http://www.TheEverbright.com\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Etherbright\r\n        </a>\r\n        <ul className=\"navbar-nav px-3\">\r\n          <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\r\n            <small className=\"text-white\"><span id=\"account\">{this.state.account}</span></small>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n      <div className=\"container-fluid mt-5\">\r\n        <div className=\"row\">\r\n          <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\r\n            <div className=\"content mr-auto ml-auto\">\r\n              <h1>setPixelColor</h1>\r\n              <form onSubmit={(event) => {\r\n                event.preventDefault()\r\n                const color = this.color.value\r\n                const n = this.n.value\r\n                this.setPixelColor(n,color)\r\n              }}>\r\n                <input\r\n                  type='text'\r\n                  className='form-control mb-1'\r\n                  placeholder='e.g. #FFFFFF'\r\n                  ref={(input) => { this.color = input }}\r\n                />\r\n                <input\r\n                  type='text'\r\n                  className='form-control mb-1'\r\n                  placeholder='pixel number'\r\n                  ref={(input) => { this.n = input }}\r\n                />\r\n                <input\r\n                  type='submit'\r\n                  className='btn btn-block btn-primary'\r\n                  value='SET PIXEL COLOR'\r\n                />\r\n              </form>\r\n            </div>\r\n          </main>\r\n        </div>\r\n          <hr/>\r\n          <button onClick={this.mintEtherbright}>mint etherbright</button>\r\n          <hr/>\r\n          <button onClick={this.getAllTokenId}>get all token ID</button>\r\n          {/*\r\n          <hr/>\r\n          <h1>JUNK</h1>\r\n          <div dangerouslySetInnerHTML={{__html: this.state.svg }} />\r\n          <hr/>\r\n          <div dangerouslySetInnerHTML={{__html: this.state.allSVGs }} />\r\n          <h1>more 2JUNK</h1>\r\n            <svg width='100' height='100'>\r\n            <circle cx='50' cy='50' r='20' fill='#ffff00' strokeWidth='9' stroke='black'/>\r\n            </svg>\r\n          <hr/>\r\n        */}\r\n\r\n\r\n\r\n\r\n        <div className=\"row text-center\">\r\n\r\n\r\n          <div>\r\n\r\n\r\n\r\n            {this.state.etherbrights.map(ethb => (\r\n              <div id=\"parent\">\r\n              <hr/>\r\n                <EthbDisplay id={ethb.id} svg={ethb.svg} setmethod={(id,pixn,paln)=>this.setEtherbrightPixelColor(id,pixn,paln)}/>\r\n              </div>\r\n            ))}\r\n\r\n          </div>\r\n\r\n\r\n        {/*  { this.state.colors.map(\r\n            (color, key) => {\r\n              return(\r\n                <div key={key} className=\"col-md-3 mb-3\">\r\n                  <div className=\"token\" style={{ backgroundColor: color }}></div>\r\n                  <div>{color}</div>\r\n                </div>\r\n              )\r\n            })\r\n          }\r\n          */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n }\r\n}\r\n\r\nclass EthbDisplay extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      id: props.id,\r\n      svg: props.svg,\r\n    };\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n          <h1>ETHBDISPLAY</h1>\r\n                <div dangerouslySetInnerHTML={{__html: this.state.svg }} />\r\n                Etherbright id: {this.state.id.toString()}\r\n              <h3>setPixelColor</h3>\r\n              <form onSubmit={(event) => {\r\n                event.preventDefault()\r\n                const paln = this.paln.value\r\n                const pixn = this.pixn.value\r\n                const id = this.state.id\r\n                this.props.setmethod(this.state.id,pixn,paln)\r\n              }}>\r\n                <input\r\n                  type='text'\r\n                  className='form-control mb-1'\r\n                  placeholder='pallent n'\r\n                  ref={(input) => { this.paln = input }}\r\n                />\r\n                <input\r\n                  type='text'\r\n                  className='form-control mb-1'\r\n                  placeholder='pixel number'\r\n                  ref={(input) => { this.pixn = input }}\r\n                />\r\n                <input\r\n                  type='submit'\r\n                  className='btn btn-block btn-primary'\r\n                  value='SET PIXEL COLOR'\r\n                />\r\n              </form>\r\n      <button className=\"button\" onClick={() => alert(this.state.id)}>\r\n      </button>\r\n          <hr/>\r\n          </div>\r\n      );\r\n    }\r\n}\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}