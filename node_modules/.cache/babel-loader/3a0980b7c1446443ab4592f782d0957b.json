{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { BaseNode, interval } from 'kapellmeister';\nimport mergeKeys from '../core/mergeKeys';\nimport { ENTER, UPDATE, LEAVE } from '../core/types';\nimport { numeric } from '../utils';\n\nvar NodeGroup = function (_Component) {\n  _inherits(NodeGroup, _Component);\n\n  var _super = _createSuper(NodeGroup);\n\n  function NodeGroup(props) {\n    var _this;\n\n    _classCallCheck(this, NodeGroup);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"animate\", function () {\n      var _this$state = _this.state,\n          nodeKeys = _this$state.nodeKeys,\n          nodeHash = _this$state.nodeHash;\n\n      if (_this.unmounting) {\n        return;\n      }\n\n      var pending = false;\n      var nextNodeKeys = [];\n      var length = nodeKeys.length;\n\n      for (var i = 0; i < length; i++) {\n        var k = nodeKeys[i];\n        var n = nodeHash[k];\n        var isTransitioning = n.isTransitioning();\n\n        if (isTransitioning) {\n          pending = true;\n        }\n\n        if (n.type === LEAVE && !isTransitioning) {\n          delete nodeHash[k];\n        } else {\n          nextNodeKeys.push(k);\n        }\n      }\n\n      if (!pending) {\n        _this.interval.stop();\n      }\n\n      _this.setState(function () {\n        return {\n          nodeKeys: nextNodeKeys,\n          nodes: nextNodeKeys.map(function (key) {\n            return nodeHash[key];\n          })\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"interval\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"unmounting\", false);\n\n    var interpolation = props.interpolation;\n\n    var Node = function (_BaseNode) {\n      _inherits(Node, _BaseNode);\n\n      var _super2 = _createSuper(Node);\n\n      function Node(key, data) {\n        var _this2;\n\n        _classCallCheck(this, Node);\n\n        _this2 = _super2.call(this);\n\n        _defineProperty(_assertThisInitialized(_this2), \"getInterpolator\", interpolation);\n\n        _this2.key = key;\n        _this2.data = data;\n        _this2.type = ENTER;\n        return _this2;\n      }\n\n      return Node;\n    }(BaseNode);\n\n    _this.state = {\n      Node: Node,\n      nodeKeys: [],\n      nodeHash: {},\n      nodes: [],\n      data: null\n    };\n    return _this;\n  }\n\n  _createClass(NodeGroup, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.startInterval();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.data !== this.props.data && !this.unmounting) {\n        this.startInterval();\n      }\n    }\n  }, {\n    key: \"startInterval\",\n    value: function startInterval() {\n      if (!this.interval) {\n        this.interval = interval(this.animate);\n      } else {\n        this.interval.restart(this.animate);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$state2 = this.state,\n          nodeKeys = _this$state2.nodeKeys,\n          nodeHash = _this$state2.nodeHash;\n      this.unmounting = true;\n\n      if (this.interval) {\n        this.interval.stop();\n      }\n\n      nodeKeys.forEach(function (key) {\n        nodeHash[key].stopTransitions();\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var renderedChildren = this.props.children(this.state.nodes);\n      return renderedChildren && React.Children.only(renderedChildren);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.data !== prevState.data) {\n        var data = nextProps.data,\n            keyAccessor = nextProps.keyAccessor,\n            start = nextProps.start,\n            enter = nextProps.enter,\n            update = nextProps.update,\n            leave = nextProps.leave;\n        var Node = prevState.Node,\n            nodeKeys = prevState.nodeKeys,\n            nodeHash = prevState.nodeHash;\n        var keyIndex = {};\n\n        for (var i = 0; i < nodeKeys.length; i++) {\n          keyIndex[nodeKeys[i]] = i;\n        }\n\n        var nextKeyIndex = {};\n        var nextNodeKeys = [];\n\n        for (var _i = 0; _i < data.length; _i++) {\n          var d = data[_i];\n          var k = keyAccessor(d, _i);\n          nextKeyIndex[k] = _i;\n          nextNodeKeys.push(k);\n\n          if (keyIndex[k] === undefined) {\n            var node = new Node();\n            node.key = k;\n            node.data = d;\n            node.type = ENTER;\n            nodeHash[k] = node;\n          }\n        }\n\n        for (var _i2 = 0; _i2 < nodeKeys.length; _i2++) {\n          var _k = nodeKeys[_i2];\n          var n = nodeHash[_k];\n\n          if (nextKeyIndex[_k] !== undefined) {\n            n.data = data[nextKeyIndex[_k]];\n            n.type = UPDATE;\n          } else {\n            n.type = LEAVE;\n          }\n        }\n\n        var mergedNodeKeys = mergeKeys(nodeKeys, keyIndex, nextNodeKeys, nextKeyIndex);\n\n        for (var _i3 = 0; _i3 < mergedNodeKeys.length; _i3++) {\n          var _k2 = mergedNodeKeys[_i3];\n          var _n = nodeHash[_k2];\n          var _d = _n.data;\n\n          if (_n.type === ENTER) {\n            _n.setState(start(_d, nextKeyIndex[_k2]));\n\n            _n.transition(enter(_d, nextKeyIndex[_k2]));\n          } else if (_n.type === LEAVE) {\n            _n.transition(leave(_d, keyIndex[_k2]));\n          } else {\n            _n.transition(update(_d, nextKeyIndex[_k2]));\n          }\n        }\n\n        return {\n          data: data,\n          nodes: mergedNodeKeys.map(function (key) {\n            return nodeHash[key];\n          }),\n          nodeHash: nodeHash,\n          nodeKeys: mergedNodeKeys\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return NodeGroup;\n}(Component);\n\nNodeGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  data: PropTypes.array.isRequired,\n  keyAccessor: PropTypes.func.isRequired,\n  interpolation: PropTypes.func,\n  start: PropTypes.func.isRequired,\n  enter: PropTypes.func,\n  update: PropTypes.func,\n  leave: PropTypes.func,\n  children: PropTypes.func.isRequired\n} : {};\nNodeGroup.defaultProps = {\n  enter: function enter() {},\n  update: function update() {},\n  leave: function leave() {},\n  interpolation: numeric\n};\nexport default NodeGroup;","map":null,"metadata":{},"sourceType":"module"}