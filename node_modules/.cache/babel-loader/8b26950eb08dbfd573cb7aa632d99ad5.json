{"ast":null,"code":"import _classCallCheck from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nvar EPSILON = Math.pow(2, -52);\nvar EDGE_STACK = new Uint32Array(512);\n\nvar Delaunator = /*#__PURE__*/function () {\n  _createClass(Delaunator, null, [{\n    key: \"from\",\n    value: function from(points) {\n      var getX = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultGetX;\n      var getY = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultGetY;\n      var n = points.length;\n      var coords = new Float64Array(n * 2);\n\n      for (var i = 0; i < n; i++) {\n        var p = points[i];\n        coords[2 * i] = getX(p);\n        coords[2 * i + 1] = getY(p);\n      }\n\n      return new Delaunator(coords);\n    }\n  }]);\n\n  function Delaunator(coords) {\n    _classCallCheck(this, Delaunator);\n\n    var n = coords.length >> 1;\n    if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\n    this.coords = coords; // arrays that will store the triangulation graph\n\n    var maxTriangles = Math.max(2 * n - 5, 0);\n    this._triangles = new Uint32Array(maxTriangles * 3);\n    this._halfedges = new Int32Array(maxTriangles * 3); // temporary arrays for tracking the edges of the advancing convex hull\n\n    this._hashSize = Math.ceil(Math.sqrt(n));\n    this._hullPrev = new Uint32Array(n); // edge to prev edge\n\n    this._hullNext = new Uint32Array(n); // edge to next edge\n\n    this._hullTri = new Uint32Array(n); // edge to adjacent triangle\n\n    this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash\n    // temporary arrays for sorting points\n\n    this._ids = new Uint32Array(n);\n    this._dists = new Float64Array(n);\n    this.update();\n  }\n\n  _createClass(Delaunator, [{\n    key: \"update\",\n    value: function update() {\n      var coords = this.coords,\n          hullPrev = this._hullPrev,\n          hullNext = this._hullNext,\n          hullTri = this._hullTri,\n          hullHash = this._hullHash;\n      var n = coords.length >> 1; // populate an array of point indices; calculate input data bbox\n\n      var minX = Infinity;\n      var minY = Infinity;\n      var maxX = -Infinity;\n      var maxY = -Infinity;\n\n      for (var i = 0; i < n; i++) {\n        var x = coords[2 * i];\n        var y = coords[2 * i + 1];\n        if (x < minX) minX = x;\n        if (y < minY) minY = y;\n        if (x > maxX) maxX = x;\n        if (y > maxY) maxY = y;\n        this._ids[i] = i;\n      }\n\n      var cx = (minX + maxX) / 2;\n      var cy = (minY + maxY) / 2;\n      var minDist = Infinity;\n      var i0, i1, i2; // pick a seed point close to the center\n\n      for (var _i = 0; _i < n; _i++) {\n        var d = dist(cx, cy, coords[2 * _i], coords[2 * _i + 1]);\n\n        if (d < minDist) {\n          i0 = _i;\n          minDist = d;\n        }\n      }\n\n      var i0x = coords[2 * i0];\n      var i0y = coords[2 * i0 + 1];\n      minDist = Infinity; // find the point closest to the seed\n\n      for (var _i2 = 0; _i2 < n; _i2++) {\n        if (_i2 === i0) continue;\n\n        var _d = dist(i0x, i0y, coords[2 * _i2], coords[2 * _i2 + 1]);\n\n        if (_d < minDist && _d > 0) {\n          i1 = _i2;\n          minDist = _d;\n        }\n      }\n\n      var i1x = coords[2 * i1];\n      var i1y = coords[2 * i1 + 1];\n      var minRadius = Infinity; // find the third point which forms the smallest circumcircle with the first two\n\n      for (var _i3 = 0; _i3 < n; _i3++) {\n        if (_i3 === i0 || _i3 === i1) continue;\n        var r = circumradius(i0x, i0y, i1x, i1y, coords[2 * _i3], coords[2 * _i3 + 1]);\n\n        if (r < minRadius) {\n          i2 = _i3;\n          minRadius = r;\n        }\n      }\n\n      var i2x = coords[2 * i2];\n      var i2y = coords[2 * i2 + 1];\n\n      if (minRadius === Infinity) {\n        // order collinear points by dx (or dy if all x are identical)\n        // and return the list as a hull\n        for (var _i4 = 0; _i4 < n; _i4++) {\n          this._dists[_i4] = coords[2 * _i4] - coords[0] || coords[2 * _i4 + 1] - coords[1];\n        }\n\n        quicksort(this._ids, this._dists, 0, n - 1);\n        var hull = new Uint32Array(n);\n        var j = 0;\n\n        for (var _i5 = 0, d0 = -Infinity; _i5 < n; _i5++) {\n          var id = this._ids[_i5];\n\n          if (this._dists[id] > d0) {\n            hull[j++] = id;\n            d0 = this._dists[id];\n          }\n        }\n\n        this.hull = hull.subarray(0, j);\n        this.triangles = new Uint32Array(0);\n        this.halfedges = new Uint32Array(0);\n        return;\n      } // swap the order of the seed points for counter-clockwise orientation\n\n\n      if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {\n        var _i6 = i1;\n        var _x = i1x;\n        var _y = i1y;\n        i1 = i2;\n        i1x = i2x;\n        i1y = i2y;\n        i2 = _i6;\n        i2x = _x;\n        i2y = _y;\n      }\n\n      var center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n      this._cx = center.x;\n      this._cy = center.y;\n\n      for (var _i7 = 0; _i7 < n; _i7++) {\n        this._dists[_i7] = dist(coords[2 * _i7], coords[2 * _i7 + 1], center.x, center.y);\n      } // sort the points by distance from the seed triangle circumcenter\n\n\n      quicksort(this._ids, this._dists, 0, n - 1); // set up the seed triangle as the starting hull\n\n      this._hullStart = i0;\n      var hullSize = 3;\n      hullNext[i0] = hullPrev[i2] = i1;\n      hullNext[i1] = hullPrev[i0] = i2;\n      hullNext[i2] = hullPrev[i1] = i0;\n      hullTri[i0] = 0;\n      hullTri[i1] = 1;\n      hullTri[i2] = 2;\n      hullHash.fill(-1);\n      hullHash[this._hashKey(i0x, i0y)] = i0;\n      hullHash[this._hashKey(i1x, i1y)] = i1;\n      hullHash[this._hashKey(i2x, i2y)] = i2;\n      this.trianglesLen = 0;\n\n      this._addTriangle(i0, i1, i2, -1, -1, -1);\n\n      for (var k = 0, xp, yp; k < this._ids.length; k++) {\n        var _i8 = this._ids[k];\n        var _x2 = coords[2 * _i8];\n        var _y2 = coords[2 * _i8 + 1]; // skip near-duplicate points\n\n        if (k > 0 && Math.abs(_x2 - xp) <= EPSILON && Math.abs(_y2 - yp) <= EPSILON) continue;\n        xp = _x2;\n        yp = _y2; // skip seed triangle points\n\n        if (_i8 === i0 || _i8 === i1 || _i8 === i2) continue; // find a visible edge on the convex hull using edge hash\n\n        var start = 0;\n\n        for (var _j = 0, key = this._hashKey(_x2, _y2); _j < this._hashSize; _j++) {\n          start = hullHash[(key + _j) % this._hashSize];\n          if (start !== -1 && start !== hullNext[start]) break;\n        }\n\n        start = hullPrev[start];\n        var e = start,\n            q = void 0;\n\n        while (q = hullNext[e], !orient(_x2, _y2, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1])) {\n          e = q;\n\n          if (e === start) {\n            e = -1;\n            break;\n          }\n        }\n\n        if (e === -1) continue; // likely a near-duplicate point; skip it\n        // add the first triangle from the point\n\n        var t = this._addTriangle(e, _i8, hullNext[e], -1, -1, hullTri[e]); // recursively flip triangles from the point until they satisfy the Delaunay condition\n\n\n        hullTri[_i8] = this._legalize(t + 2);\n        hullTri[e] = t; // keep track of boundary triangles on the hull\n\n        hullSize++; // walk forward through the hull, adding more triangles and flipping recursively\n\n        var _n = hullNext[e];\n\n        while (q = hullNext[_n], orient(_x2, _y2, coords[2 * _n], coords[2 * _n + 1], coords[2 * q], coords[2 * q + 1])) {\n          t = this._addTriangle(_n, _i8, q, hullTri[_i8], -1, hullTri[_n]);\n          hullTri[_i8] = this._legalize(t + 2);\n          hullNext[_n] = _n; // mark as removed\n\n          hullSize--;\n          _n = q;\n        } // walk backward from the other side, adding more triangles and flipping\n\n\n        if (e === start) {\n          while (q = hullPrev[e], orient(_x2, _y2, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1])) {\n            t = this._addTriangle(q, _i8, e, -1, hullTri[e], hullTri[q]);\n\n            this._legalize(t + 2);\n\n            hullTri[q] = t;\n            hullNext[e] = e; // mark as removed\n\n            hullSize--;\n            e = q;\n          }\n        } // update the hull indices\n\n\n        this._hullStart = hullPrev[_i8] = e;\n        hullNext[e] = hullPrev[_n] = _i8;\n        hullNext[_i8] = _n; // save the two new edges in the hash table\n\n        hullHash[this._hashKey(_x2, _y2)] = _i8;\n        hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n      }\n\n      this.hull = new Uint32Array(hullSize);\n\n      for (var _i9 = 0, _e = this._hullStart; _i9 < hullSize; _i9++) {\n        this.hull[_i9] = _e;\n        _e = hullNext[_e];\n      } // trim typed triangle mesh arrays\n\n\n      this.triangles = this._triangles.subarray(0, this.trianglesLen);\n      this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\n    }\n  }, {\n    key: \"_hashKey\",\n    value: function _hashKey(x, y) {\n      return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n    }\n  }, {\n    key: \"_legalize\",\n    value: function _legalize(a) {\n      var triangles = this._triangles,\n          halfedges = this._halfedges,\n          coords = this.coords;\n      var i = 0;\n      var ar = 0; // recursion eliminated with a fixed-size stack\n\n      while (true) {\n        var b = halfedges[a];\n        /* if the pair of triangles doesn't satisfy the Delaunay condition\n         * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n         * then do the same check/flip recursively for the new pair of triangles\n         *\n         *           pl                    pl\n         *          /||\\                  /  \\\n         *       al/ || \\bl            al/    \\a\n         *        /  ||  \\              /      \\\n         *       /  a||b  \\    flip    /___ar___\\\n         *     p0\\   ||   /p1   =>   p0\\---bl---/p1\n         *        \\  ||  /              \\      /\n         *       ar\\ || /br             b\\    /br\n         *          \\||/                  \\  /\n         *           pr                    pr\n         */\n\n        var a0 = a - a % 3;\n        ar = a0 + (a + 2) % 3;\n\n        if (b === -1) {\n          // convex hull edge\n          if (i === 0) break;\n          a = EDGE_STACK[--i];\n          continue;\n        }\n\n        var b0 = b - b % 3;\n        var al = a0 + (a + 1) % 3;\n        var bl = b0 + (b + 2) % 3;\n        var p0 = triangles[ar];\n        var pr = triangles[a];\n        var pl = triangles[al];\n        var p1 = triangles[bl];\n        var illegal = inCircle(coords[2 * p0], coords[2 * p0 + 1], coords[2 * pr], coords[2 * pr + 1], coords[2 * pl], coords[2 * pl + 1], coords[2 * p1], coords[2 * p1 + 1]);\n\n        if (illegal) {\n          triangles[a] = p1;\n          triangles[b] = p0;\n          var hbl = halfedges[bl]; // edge swapped on the other side of the hull (rare); fix the halfedge reference\n\n          if (hbl === -1) {\n            var e = this._hullStart;\n\n            do {\n              if (this._hullTri[e] === bl) {\n                this._hullTri[e] = a;\n                break;\n              }\n\n              e = this._hullPrev[e];\n            } while (e !== this._hullStart);\n          }\n\n          this._link(a, hbl);\n\n          this._link(b, halfedges[ar]);\n\n          this._link(ar, bl);\n\n          var br = b0 + (b + 1) % 3; // don't worry about hitting the cap: it can only happen on extremely degenerate input\n\n          if (i < EDGE_STACK.length) {\n            EDGE_STACK[i++] = br;\n          }\n        } else {\n          if (i === 0) break;\n          a = EDGE_STACK[--i];\n        }\n      }\n\n      return ar;\n    }\n  }, {\n    key: \"_link\",\n    value: function _link(a, b) {\n      this._halfedges[a] = b;\n      if (b !== -1) this._halfedges[b] = a;\n    } // add a new triangle given vertex indices and adjacent half-edge ids\n\n  }, {\n    key: \"_addTriangle\",\n    value: function _addTriangle(i0, i1, i2, a, b, c) {\n      var t = this.trianglesLen;\n      this._triangles[t] = i0;\n      this._triangles[t + 1] = i1;\n      this._triangles[t + 2] = i2;\n\n      this._link(t, a);\n\n      this._link(t + 1, b);\n\n      this._link(t + 2, c);\n\n      this.trianglesLen += 3;\n      return t;\n    }\n  }]);\n\n  return Delaunator;\n}(); // monotonically increases with real angle, but doesn't need expensive trigonometry\n\n\nexport { Delaunator as default };\n\nfunction pseudoAngle(dx, dy) {\n  var p = dx / (Math.abs(dx) + Math.abs(dy));\n  return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n}\n\nfunction dist(ax, ay, bx, by) {\n  var dx = ax - bx;\n  var dy = ay - by;\n  return dx * dx + dy * dy;\n} // return 2d orientation sign if we're confident in it through J. Shewchuk's error bound check\n\n\nfunction orientIfSure(px, py, rx, ry, qx, qy) {\n  var l = (ry - py) * (qx - px);\n  var r = (rx - px) * (qy - py);\n  return Math.abs(l - r) >= 3.3306690738754716e-16 * Math.abs(l + r) ? l - r : 0;\n} // a more robust orientation test that's stable in a given triangle (to fix robustness issues)\n\n\nfunction orient(rx, ry, qx, qy, px, py) {\n  var sign = orientIfSure(px, py, rx, ry, qx, qy) || orientIfSure(rx, ry, qx, qy, px, py) || orientIfSure(qx, qy, px, py, rx, ry);\n  return sign < 0;\n}\n\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\n  var dx = ax - px;\n  var dy = ay - py;\n  var ex = bx - px;\n  var ey = by - py;\n  var fx = cx - px;\n  var fy = cy - py;\n  var ap = dx * dx + dy * dy;\n  var bp = ex * ex + ey * ey;\n  var cp = fx * fx + fy * fy;\n  return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;\n}\n\nfunction circumradius(ax, ay, bx, by, cx, cy) {\n  var dx = bx - ax;\n  var dy = by - ay;\n  var ex = cx - ax;\n  var ey = cy - ay;\n  var bl = dx * dx + dy * dy;\n  var cl = ex * ex + ey * ey;\n  var d = 0.5 / (dx * ey - dy * ex);\n  var x = (ey * bl - dy * cl) * d;\n  var y = (dx * cl - ex * bl) * d;\n  return x * x + y * y;\n}\n\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\n  var dx = bx - ax;\n  var dy = by - ay;\n  var ex = cx - ax;\n  var ey = cy - ay;\n  var bl = dx * dx + dy * dy;\n  var cl = ex * ex + ey * ey;\n  var d = 0.5 / (dx * ey - dy * ex);\n  var x = ax + (ey * bl - dy * cl) * d;\n  var y = ay + (dx * cl - ex * bl) * d;\n  return {\n    x: x,\n    y: y\n  };\n}\n\nfunction quicksort(ids, dists, left, right) {\n  if (right - left <= 20) {\n    for (var i = left + 1; i <= right; i++) {\n      var temp = ids[i];\n      var tempDist = dists[temp];\n      var j = i - 1;\n\n      while (j >= left && dists[ids[j]] > tempDist) {\n        ids[j + 1] = ids[j--];\n      }\n\n      ids[j + 1] = temp;\n    }\n  } else {\n    var median = left + right >> 1;\n\n    var _i10 = left + 1;\n\n    var _j2 = right;\n    swap(ids, median, _i10);\n    if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);\n    if (dists[ids[_i10]] > dists[ids[right]]) swap(ids, _i10, right);\n    if (dists[ids[left]] > dists[ids[_i10]]) swap(ids, left, _i10);\n    var _temp = ids[_i10];\n    var _tempDist = dists[_temp];\n\n    while (true) {\n      do {\n        _i10++;\n      } while (dists[ids[_i10]] < _tempDist);\n\n      do {\n        _j2--;\n      } while (dists[ids[_j2]] > _tempDist);\n\n      if (_j2 < _i10) break;\n      swap(ids, _i10, _j2);\n    }\n\n    ids[left + 1] = ids[_j2];\n    ids[_j2] = _temp;\n\n    if (right - _i10 + 1 >= _j2 - left) {\n      quicksort(ids, dists, _i10, right);\n      quicksort(ids, dists, left, _j2 - 1);\n    } else {\n      quicksort(ids, dists, left, _j2 - 1);\n      quicksort(ids, dists, _i10, right);\n    }\n  }\n}\n\nfunction swap(arr, i, j) {\n  var tmp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = tmp;\n}\n\nfunction defaultGetX(p) {\n  return p[0];\n}\n\nfunction defaultGetY(p) {\n  return p[1];\n}","map":null,"metadata":{},"sourceType":"module"}