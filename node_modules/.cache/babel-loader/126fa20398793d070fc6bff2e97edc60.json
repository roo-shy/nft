{"ast":null,"code":"import _classCallCheck from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"H:\\\\Expermental\\\\nft\\\\src\\\\components\\\\EtherbrightPixelDisplay.js\";\nimport React, { Component } from 'react';\nimport { Animate } from 'react-move'; // import { SvgLoader, SvgProxy } from 'react-svgmt';\n\nimport { interpolate, interpolateTransformSvg } from 'd3-interpolate';\n\nvar EtherbrightPixelDisplay = /*#__PURE__*/function (_Component) {\n  _inherits(EtherbrightPixelDisplay, _Component);\n\n  function EtherbrightPixelDisplay(props) {\n    var _this;\n\n    _classCallCheck(this, EtherbrightPixelDisplay);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EtherbrightPixelDisplay).call(this, props)); // console.log(\"MOVIE IN CONST \",props.movie)\n\n    _this.pixelClickHandler = function (e, id) {\n      console.log(\"Pix N \", e.target.getAttributeNS(null, \"pn\"));\n      console.log(\"Color \", e.target.getAttributeNS(null, \"fill\"));\n      console.log(\"ID \", e.target.getAttributeNS(null, \"id\"));\n    };\n\n    _this.state = {\n      pixels: props.pixels,\n      pallet: props.pallet,\n      movie: props.movie,\n      id: props.id,\n      movieFrame: props.movie[0],\n      frameNumber: 0,\n      c1: \"#00ff00\",\n      c2: \"#ff00ff\",\n      cnt: 0\n    };\n    return _this;\n  }\n\n  _createClass(EtherbrightPixelDisplay, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //Use React Move to animate the body\n      setInterval(function () {\n        _this2.setState(_this2.changecolor);\n      }, 1000);\n      setInterval(function () {\n        _this2.setState(_this2.updateMovieFrame);\n      }, 1000);\n    }\n  }, {\n    key: \"changecolor\",\n    value: function changecolor(prevState) {\n      // console.log(\"JUMP \",this.state.c1);\n      return {\n        c1: this.state.pallet[this.state.cnt % 6],\n        cnt: prevState.cnt + 1\n      };\n    }\n  }, {\n    key: \"updateMovieFrame\",\n    value: function updateMovieFrame(prevState) {\n      return {\n        movieFrame: this.state.movie[this.state.frameNumber],\n        frameNumber: (prevState.frameNumber + 1) % this.state.movie.lenght\n      };\n    }\n  }, {\n    key: \"getCircle\",\n    value: function getCircle(n, x, y, c) {\n      var _this3 = this;\n\n      return React.createElement(\"circle\", {\n        key: n,\n        id: this.state.id.toHexString(),\n        pn: n,\n        cx: x,\n        cy: y,\n        r: \"20\",\n        fill: c,\n        strokeWidth: \"8\",\n        stroke: \"black\",\n        onClick: function onClick(e) {\n          _this3.pixelClickHandler(e, _this3.state.id);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"getSVG\",\n    value: function getSVG() {\n      var _this4 = this;\n\n      return React.createElement(\"svg\", {\n        width: \"300\",\n        height: \"300\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, this.state.pixels.map(function (pix) {\n        return _this4.getCircle(pix.id, pix.xpos, pix.ypos, pix.color);\n      }));\n    }\n  }, {\n    key: \"animatedSVG_TEST\",\n    value: function animatedSVG_TEST() {\n      return React.createElement(\"svg\", {\n        width: \"300\",\n        height: \"300\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(Animate, {\n        start: {\n          c: this.state.c1\n        },\n        enter: {\n          c: this.state.c1\n        },\n        update: {\n          c: this.state.c1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, function (data) {\n        {\n          /*console.log(\"DATA \",data.c);*/\n        }\n        return React.createElement(\"circle\", {\n          cx: \"50\",\n          cy: \"50\",\n          r: \"20\",\n          fill: data.c,\n          strokeWidth: \"8\",\n          stroke: \"black\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        });\n      }));\n    }\n  }, {\n    key: \"animatedPxielDisplay\",\n    value: function animatedPxielDisplay() {\n      var _this5 = this;\n\n      return React.createElement(\"svg\", {\n        width: \"300\",\n        height: \"300\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, this.state.pixels.map(function (pix) {\n        return _this5.getCircle(pix.id, pix.xpos, pix.ypos, \"#FF00FF\");\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return (// this.getSVG()\n        this.animatedPxielDisplay() // this.animatedSVG_TEST()\n\n      );\n    }\n  }]);\n\n  return EtherbrightPixelDisplay;\n}(Component);\n\nexport { EtherbrightPixelDisplay as default };","map":{"version":3,"sources":["H:/Expermental/nft/src/components/EtherbrightPixelDisplay.js"],"names":["React","Component","Animate","interpolate","interpolateTransformSvg","EtherbrightPixelDisplay","props","pixelClickHandler","e","id","console","log","target","getAttributeNS","state","pixels","pallet","movie","movieFrame","frameNumber","c1","c2","cnt","setInterval","setState","changecolor","updateMovieFrame","prevState","lenght","n","x","y","c","toHexString","map","pix","getCircle","xpos","ypos","color","data","animatedPxielDisplay"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Animate } from 'react-move';\r\n// import { SvgLoader, SvgProxy } from 'react-svgmt';\r\nimport { interpolate, interpolateTransformSvg } from 'd3-interpolate'\r\n\r\nexport default class EtherbrightPixelDisplay extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\t// console.log(\"MOVIE IN CONST \",props.movie)\r\n\t\tthis.state={\r\n\t\tpixels: props.pixels,\r\n\t\tpallet: props.pallet,\r\n\t\tmovie: props.movie,\r\n\t\tid:props.id,\r\n\t\tmovieFrame:props.movie[0],\r\n\t\tframeNumber:0,\r\n\t\tc1:\"#00ff00\",\r\n\t\tc2:\"#ff00ff\",\r\n\t\tcnt:0,\r\n\t\t};\r\n\t}\r\n\tcomponentDidMount() {\r\n    //Use React Move to animate the body\r\n\t    setInterval(() => {\r\n\t      this.setState(this.changecolor);\r\n\t    }, 1000);\r\n\r\n\t   \tsetInterval(() => {\r\n\t      this.setState(this.updateMovieFrame);\r\n\t    }, 1000);\r\n\t}\r\n\tchangecolor(prevState){\r\n\t\t// console.log(\"JUMP \",this.state.c1);\r\n\t\treturn{c1:this.state.pallet[this.state.cnt%6], cnt:prevState.cnt+1};\r\n\r\n\t}\r\n\tupdateMovieFrame(prevState){\r\n\t\treturn{\r\n\t\t\tmovieFrame:this.state.movie[this.state.frameNumber],\r\n\t\t\tframeNumber:(prevState.frameNumber+1)%this.state.movie.lenght\r\n\t\t}\r\n\r\n\t}\r\n\tpixelClickHandler=(e,id)=>{\r\n\t\tconsole.log(\"Pix N \",e.target.getAttributeNS(null,\"pn\"))\r\n  \t\tconsole.log(\"Color \",e.target.getAttributeNS(null,\"fill\"))\r\n  \t\tconsole.log(\"ID \",e.target.getAttributeNS(null,\"id\"))\r\n\t}\r\n\r\n\tgetCircle(n,x,y,c){\r\n\r\n\t    return(\r\n\t      <circle key={n} id={this.state.id.toHexString()} pn={n} cx={x} cy={y} r='20' fill={c} strokeWidth='8' stroke='black' onClick  ={(e) => {this.pixelClickHandler(e,this.state.id);}} />\r\n\t    )\r\n\t}\r\n\t getSVG(){\r\n  \t\treturn(\r\n\t\t\t<svg width='300' height='300'>\r\n\t          {this.state.pixels.map(pix=>(this.getCircle(pix.id, pix.xpos, pix.ypos, pix.color) ))}\r\n\t        </svg>\r\n        )\r\n\t }\r\n\r\n\r\n\t animatedSVG_TEST(){\r\n\t \treturn(\r\n\t        <svg width=\"300\" height=\"300\">\r\n\t          <Animate\r\n\t            start={{ c: this.state.c1 }}\r\n\t            enter={{ c: this.state.c1 }}\r\n\t            update={{ c: this.state.c1 }}\r\n\t          >\r\n\t            {(data) => {\r\n\t            \t{/*console.log(\"DATA \",data.c);*/}\r\n\t            \treturn(\r\n\t            \t\t<circle cx=\"50\" cy=\"50\" r=\"20\" fill={data.c} strokeWidth='8' stroke='black' />\r\n\t            \t)\r\n\t            \t}\r\n\t        \t}\r\n\r\n\t          </Animate>\r\n\t        </svg>\r\n \t\t)\r\n\t }\r\n\r\n\t animatedPxielDisplay(){\r\n\t \treturn(\r\n\r\n        <svg width='300' height='300'>\r\n          {this.state.pixels.map(pix=>(this.getCircle(pix.id, pix.xpos, pix.ypos, \"#FF00FF\") ))}\r\n        </svg>\r\n\r\n\r\n\t \t)\r\n\t }\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t// this.getSVG()\r\n\t\t\tthis.animatedPxielDisplay()\r\n\t\t\t// this.animatedSVG_TEST()\r\n\r\n\t    )\r\n\t}\r\n\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module"}