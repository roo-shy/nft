{"ast":null,"code":"import _regeneratorRuntime from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _slicedToArray from \"H:\\\\Expermental\\\\nft\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"H:\\\\Expermental\\\\nft\\\\src\\\\components\\\\App.js\";\nimport React, { Component, useState, useEffect } from 'react'; // import { ReactSVG } from 'react-svg'\n// import logo from '../logo.png';\n\nimport './App.css';\nimport Web3 from 'web3';\nimport Color from '../abis/Color.json';\nimport { CirclePicker } from 'react-color';\nimport { Animate } from 'react-move';\nimport * as d3 from 'd3';\nvar contractAddy = \"0xFaFb7b0B15B240c42D011D2b9779804A847FdF58\";\nvar history = [];\nvar gotPastEvents = false;\nvar tickTiming = {\n  duration: 800,\n  ease: d3.easeElasticOut.amplitude(1.5).period(1.5)\n};\n\nfunction Etherbright(id, xpos, ypos, pixels, pallet, svg, mode, owner, history, mintPix) {\n  this.id = id;\n  this.owner = owner;\n  this.svg = svg;\n  this.mode = 0;\n  this.pixels = pixels;\n  this.pallet = pallet;\n  this.xpos = xpos;\n  this.ypos = ypos;\n  this.history = history;\n  this.mintPix = mintPix;\n}\n\nfunction Pixel(id, xpos, ypos, color) {\n  this.id = id;\n  this.xpos = xpos;\n  this.ypos = ypos;\n  this.color = color;\n} // function  svgonclick(e,id){\n//   console.log(\"Color \",e.target.getAttributeNS(null,\"fill\"));\n//   console.log(\"ID \",e.target.getAttributeNS(null,\"id\"));\n//   window.App.setEtherbrightPixelColor(e.target.getAttributeNS(null,\"id\"),0,0);\n// };\n// function getHistory(id){\n//   // console.log(\" GETTING HISTORY for : \",id)\n//   // console.log()\n//   var pixHist=[];\n//   for (const hist of history) {\n//       // console.log(\"hist \",hist.returnValues[0]);\n//     if(hist.returnValues[0].toString()==id.toString()){\n//     // console.log(\"MATCH\",hist.returnValues[0]);\n//       pixHist.push([hist.returnValues[1].toNumber(),hist.returnValues[2]])\n//     }\n//   }\n//   return pixHist;\n// }\n\n\nfunction generateSvg(id, pixels) {\n  var header = \"<svg width='300' height='300'>\";\n  var footer = \"</svg>\"; // var body\n\n  var xoff = 50;\n  var yoff = 50;\n  var p = 0; // for(var p=0; p<24; p++){\n  //   var c=pixels[p];\n  //   var e=\"<circle id={this.state.id.toHexString()} cx='\"+p+\"' cy='50' r='20' fill=\"+c+\" strokeWidth='9' stroke='black' onClick  ={(e) => {this.props.testsvg(e) ;}}/>\";\n  //   header=header.concat(e);\n  // }\n\n  for (var x = 1; x <= 5; x++) {\n    for (var y = 1; y <= 5; y++) {\n      // console.log(\"x:\",x,\" y:\",y,\" p:\",p,\" c:\",c);\n      var c = pixels[p];\n      var e = \"<circle id='\" + id + \"' cx='\" + xoff * x + \"' cy='\" + yoff * y + \"' r='20' fill=\" + c + \" strokeWidth='10' stroke='black' onClick  ='{(e) => {this.props.testsvg(e);}}'/>\";\n      header = header.concat(e);\n      p++;\n    }\n  }\n\n  header = header.concat(footer);\n  return header; // console.log(\"generateSVG  \",header)\n}\n\nfunction useTick(delay, initialIndex) {\n  var _useState = useState(initialIndex ? initialIndex : 0),\n      _useState2 = _slicedToArray(_useState, 2),\n      tick = _useState2[0],\n      setTick = _useState2[1];\n\n  useEffect(function () {\n    var interval = setInterval(function () {\n      if (!document.hidden) {\n        setTick(function (tick) {\n          return tick + 1;\n        });\n      }\n    }, delay);\n    return function () {\n      return clearInterval(interval);\n    };\n  }, []);\n  return tick;\n}\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.mint = function (color) {\n      _this.state.contract.methods.mint(color).send({\n        from: _this.state.account,\n        gas: 3000000\n      }) //gas must be set with each call for Ganche-cli\n      .on('receipt', function (receipt) {\n        // console.log(\"got mints receipt\")\n        _this.setState({\n          colors: [].concat(_toConsumableArray(_this.state.colors), [color])\n        });\n      });\n    };\n\n    _this.mintEtherbright = function () {\n      console.log(\"MINTETHERBRIGHT account: \", _this.state.account);\n\n      _this.state.contract.methods.mintEtherbright(_this.state.account).send({\n        from: _this.state.account\n      });\n    };\n\n    _this.setPixelColor = function (n, color) {\n      _this.state.contract.methods.setPixel(n, color).send({\n        from: _this.state.account\n      });\n    };\n\n    _this.setEtherbrightPixelColor = function (id, pixn, paln) {\n      console.log(\"setEtherbrightPixelColor: \", id, \" \", pixn, \" \", paln);\n\n      _this.state.contract.methods.setEtherbrightPixel(id, pixn, paln).send({\n        from: _this.state.account\n      });\n    };\n\n    _this.testsvgonclick = function (e, id) {\n      console.log(\"Pix N \", e.target.getAttributeNS(null, \"pn\"));\n      console.log(\"Color \", e.target.getAttributeNS(null, \"fill\"));\n      console.log(\"ID \", e.target.getAttributeNS(null, \"id\")); // window.App.setEtherbrightPixelColor(e.target.getAttributeNS(null,\"id\"),0,0)\n    };\n\n    _this.getAllTokenId = function () {\n      _this.state.contract.methods.totalSupply().call().then(function (totalSupply) {\n        console.log(\"Total Supply with a promise:\", totalSupply);\n      });\n    };\n\n    _this.update = function () {\n      _this.forceUpdate();\n\n      console.log(_this.state.etherbrights);\n    };\n\n    _this.state = {\n      account: '',\n      contract: null,\n      contractSocket: null,\n      totalSupply: 1,\n      svg: '',\n      colors: [],\n      etherbrights: [],\n      etherbrightIDs: [],\n      allSVGs: [],\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(\"loadWeb3\");\n\n                if (!window.ethereum) {\n                  _context.next = 9;\n                  break;\n                }\n\n                console.log(\"loadWeb3  ETH\"); // window.web3 = new Web3(window.ethereum)\n                // window.web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8545')) //USED WITH GANACHE CLI\n\n                window.web3Socket = new Web3(new Web3.providers.WebsocketProvider('wss://ropsten.infura.io/ws/v3/4499efec5f8f4aacaf7988bac139d9d3')); //USED WITH GANACHE CLI\n\n                window.web3 = new Web3(window.ethereum); //was mm\n\n                _context.next = 7;\n                return window.ethereum.enable();\n\n              case 7:\n                _context.next = 10;\n                break;\n\n              case 9:\n                if (window.web3) {\n                  console.log(\"loadWeb3  WEB3\"); // window.web3 = new Web3(window.web3.currentProvider)\n                  // window.web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8545'))//USED WITH GANACHE CLI\n\n                  window.web3 = new Web3(new Web3.providers.WebsocketProvider('wss://ropsten.infura.io/ws/v3/4499efec5f8f4aacaf7988bac139d9d3')); //USED WITH GANACHE CLI\n                } else {\n                  window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n                }\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                console.log(\"loadingWeb3\");\n                _context2.next = 3;\n                return this.loadWeb3();\n\n              case 3:\n                console.log(\"loadBlockchainData\");\n                _context2.next = 6;\n                return this.loadBlockchainData();\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _this2 = this;\n\n        var web3, web3Socket, accounts, networkId, networkData, i, ethbID, proms, allProms;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                web3 = window.web3;\n                web3Socket = window.web3Socket; // Load account\n\n                _context4.next = 4;\n                return web3.eth.getAccounts();\n\n              case 4:\n                accounts = _context4.sent;\n                //gets accout from metamask\n                // const accounts = await window.mm.eth.getAccounts() //gets accout from metamask\n                window.ethereum.on('accountsChanged', function (accounts) {\n                  console.log(\"ACCOUNT CHANGE\");\n\n                  _this2.setState({\n                    account: accounts[0]\n                  }); //state store property values of a componet and when the state chages the componet re-renders\n\n                });\n                console.log(\"account: \", accounts);\n                this.setState({\n                  account: accounts[0]\n                }); //state store property values of a componet and when the state chages the componet re-renders\n\n                _context4.next = 10;\n                return web3.eth.net.getId();\n\n              case 10:\n                networkId = _context4.sent;\n                //detercts the eth network \n                networkData = Color.networks[networkId]; //gets the contracts address on the network\n                // console.log(\"netowrkdata\",networkId)\n\n                if (!networkData) {\n                  _context4.next = 16;\n                  break;\n                }\n\n                return _context4.delegateYield( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                  var abi, address, returnContract, returnContractSocket, returntotalSupply;\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          //if it has an addres\n                          abi = Color.abi; //creates a JS version of the contract with its abi\n\n                          address = networkData.address; //its actual address?\n                          // console.log(\"networkData:\",networkData);\n\n                          console.log(\"addy\", address); // console.log(\"abi:\",abi);\n                          // const returnContract = new web3.eth.Contract(abi, address)//creates a new version of this contract\n\n                          returnContract = new web3.eth.Contract(abi, contractAddy);\n\n                          _this2.setState({\n                            contract: returnContract\n                          }); //sets it in state obj\n                          // console.log(\"contract:\",this.state.contract)\n\n\n                          returnContractSocket = new web3Socket.eth.Contract(abi, contractAddy);\n\n                          _this2.setState({\n                            contractSocket: returnContractSocket\n                          }); // console.log(\"contractScoket:\",this.state.contract)\n                          // console.log(\"calling test return\")\n                          // const testreturn=returnContract.methods.testReturn(\"this is a test\").call({from: this.state.account})\n                          // console.log(\"testreturn \",testreturn)\n                          // console.log(\"calling totalssupply\")\n\n\n                          _context3.next = 9;\n                          return returnContract.methods.totalSupply().call();\n\n                        case 9:\n                          returntotalSupply = _context3.sent;\n                          //calls a contracts method\n                          console.log(\"returntotalsupply\", returntotalSupply.toString());\n\n                          _this2.setState({\n                            totalSupply: returntotalSupply\n                          }); //sets state var\n                          // console.log(\"state total supply\",this.state.totalSupply)\n                          // var returnSVG = await returnContract.methods.generateSVG().call()\n                          // this.setState({svg:returnSVG})\n                          // const tmp=\"<svg><circle cx=\"50\" cy=\"50\" r=\"20\" fill=\"#ff0000\" stroke-width=\"9\" stroke=\"black\"/></svg>\"\n                          // this.setState({svg:\"<svg width='100' height='100'><circle cx='50' cy='50' r='20' fill='#ffff00' stroke-width='9' stroke='black'/></svg>\"})\n                          // console.log(\"SVG: \",this.state.svg)\n\n\n                          returnContractSocket.events.Selector().on('data', function (event) {\n                            console.log(\"SELECTOR: \", event.returnValues[0]);\n                          }).on('error', console.error); // returnContract.events.SVGgenerated()\n                          // .on('data', (event) => {\n                          //   console.log(\"SVG EVENT \",event);\n                          //   this.setState({svg:event.returnValues[0]})\n                          // })\n                          // .on('error', console.error)\n                          // returnContract.events.EtherbrightSVGgenerated()\n                          // .on('data', (event) => {\n                          //   console.log(\"ETHB SVG EVENT \",event);\n                          //   // this.setState({svg:event.returnValues[0]})\n                          // })\n                          // .on('error', console.error)\n\n                          returnContractSocket.events.EtherbrightPixelChanged().on('data', function (event) {\n                            console.log(\"ETHB PIXEL CHANGED EVENT \", event); // returnContract.methods.generateEtherbrightsSVG(event.returnValues[0]).call()\n                            //   .then(function(result){console.log(result)})\n\n                            for (var index = 0; index < _this2.state.etherbrights.length; index++) {\n                              console.log(\"index \", index);\n                              console.log(\"state ID \", _this2.state.etherbrights[index].id.toHexString());\n                              console.log(\"token id \", event.returnValues[0].toHexString());\n\n                              if (_this2.state.etherbrights[index].id.toHexString() === event.returnValues[0].toHexString()) {\n                                console.log(\"THIS IS IT\");\n                                break;\n                              }\n                            } // console.log(\"etherbrights: \",this.state.etherbrights );\n\n\n                            var _etherbrights = Object.assign(_this2.state.etherbrights); // console.log(\"_etherbrights \",_etherbrights );\n                            // var tmp;\n\n\n                            var pixN = event.returnValues[1];\n                            _etherbrights[index].pixels[pixN].color = event.returnValues[3];\n\n                            _this2.setState({\n                              etherbrights: []\n                            });\n\n                            _this2.setState({\n                              etherbrights: _etherbrights\n                            }); // this.setMethod(_etherbrights);\n                            // this.state.etherbrights.map(ethb =>{\n                            //   if(ethb.id=event.returnValues[0]){\n                            //     // console.log(\"THIS IS IT\", index);\n                            //     var returnSVG =  returnContract.methods.generateEtherbrightsSVG(event.returnValues[0]).call()\n                            //     // this.setState()\n                            //     // let tmparray=this.state.etherbrights.slice();\n                            //     // tmparray[id][svg]=returnSVG;\n                            //     // setarray(tmparray);\n                            //   }\n                            //   }\n                            //   )\n\n                          }).on('error', console.error); // returnContract.events.PixelChanged()\n                          // .on('data', (event) => {\n                          //   console.log(\"PIXEL CHANGED EVENT \",event.returnValues[0]);\n                          // })\n                          // .on('error', console.error)\n                          // returnContract.events.EtherbrightMinted()\n                          // .on('data', (event) => {\n                          //   console.log(\"Etherbright Minted \",event);\n                          //     var ethb=new Etherbright(event.returnValues[0],event.returnValues[1]);\n                          //   this.setState({\n                          //     etherbrights: [...this.state.etherbrights, ethb]\n                          //   })\n                          // })\n                          // .on('error', console.error)\n\n                          returnContractSocket.events.EtherbrightMinted().on('data', function (event) {\n                            console.log(\"Etherbright Minted \", event);\n                            var id = event.returnValues[0];\n                            var owner = event.returnValues[1];\n                            console.log(\" minted id \", id); // var pixels=[];\n                            // var svg=\"tmp\";\n                            // var waiting=1;\n\n                            var ethb = new Etherbright();\n                            ethb.id = id;\n                            ethb.owner = owner;\n                            var proms = []; // var pixelColors=[];\n                            // returnContract.methods.getEtherbrightPallet(id).call().then(function(result){ethb.pallet=result;console.log(\"PALLET \",result)});\n                            // returnContract.methods.getEtherbrightPixels(id).call().then(function(result){pixelColors=result;console.log(\"PALLET \",result)});\n\n                            proms.push(returnContractSocket.methods.getEtherbrightPallet(id).call());\n                            proms.push(returnContractSocket.methods.getEtherbrightPixels(id).call());\n                            var allProms = Promise.all(proms);\n                            allProms.then(function (data) {\n                              // console.log(\"DATA 0\",data[0])\n                              ethb.pallet = data[0]; // console.log(\"ethb.pallet \",ethb.pallet)\n                              // console.log(\"ALL PROMS ID \",ethb.id); \n\n                              var xoff = 50;\n                              var yoff = 50;\n                              var p = 0;\n                              var pixels = [];\n\n                              for (var x = 1; x <= 5; x++) {\n                                for (var y = 1; y <= 5; y++) {\n                                  pixels.push(new Pixel(p, xoff * x, yoff * y, data[1][p]));\n                                  p++;\n                                }\n                              }\n\n                              ethb.pixels = pixels; // console.log(\"PIX \",ethb.pixels);\n                              // console.log(\"PALLET \",ethb.pallet);\n                              // ethb.svg=generateSvg(ethb.id,ethb.pixels);\n\n                              _this2.setState({\n                                etherbrights: [].concat(_toConsumableArray(_this2.state.etherbrights), [ethb])\n                              });\n                            });\n                          }).on('error', console.error);\n                          returnContractSocket.events.Transfer().on('data', function (event) {\n                            console.log(\"GOT EVENT\");\n                            console.log(event);\n                          }).on('error', console.error);\n                          returnContractSocket.getPastEvents('EtherbrightPixelChanged', {\n                            fromBlock: 0,\n                            toBlock: 'latest'\n                          }, function (error, events) {\n                            history = events;\n                            console.log(\"PixelChangeHistory=\", history);\n                            gotPastEvents = true;\n                          }).then(function (events) {}); // returnContract.getPastEvents('SVGgenerated', {\n                          //     fromBlock: 0,\n                          //     toBlock: 'latest'\n                          // }, function(error, events){ \n                          //     console.log(events); \n                          //     // returnSVG= returnContract.methods.generateSVG().call();\n                          //     // this.setState({svg:returnSVG});\n                          //    })\n                          // .then(function(events){\n                          //     console.log(events) // same results as the optional callback above\n                          // });\n                          // Load Colors\n                          // for (var i = 1; i <= returntotalSupply; i++) {\n                          //   const color = await returnContract.methods.colors(i - 1).call()\n                          //   this.setState({\n                          //     colors: [...this.state.colors, color]\n                          //   })\n                          // }\n                          // var _svgmap = new Map();\n\n                          if (!(returntotalSupply > 0)) {\n                            _context3.next = 37;\n                            break;\n                          }\n\n                          i = 0;\n\n                        case 19:\n                          if (!(i < returntotalSupply)) {\n                            _context3.next = 35;\n                            break;\n                          }\n\n                          _context3.next = 22;\n                          return returnContract.methods.tokenByIndex(i).call();\n\n                        case 22:\n                          ethbID = _context3.sent;\n                          proms = [];\n                          proms.push(returnContract.methods.getEtherbrightPixels(ethbID).call());\n                          proms.push(returnContract.methods.getEtherbrightPallet(ethbID).call());\n                          proms.push(returnContract.methods.tokenByIndex(i).call());\n                          proms.push(returnContract.methods.ownerOf(ethbID).call());\n                          proms.push(returnContractSocket.getPastEvents('EtherbrightPixelChanged', {\n                            fromBlock: 0,\n                            toBlock: 'latest',\n                            topics: [ethbID._hex]\n                          }));\n                          proms.push(returnContract.methods.getEtherbrightMintPixels(ethbID).call());\n                          allProms = Promise.all(proms);\n                          allProms.then(function (data) {\n                            // console.log(\" startup ALL PROMS ID =\",ethbID.toString()); \n                            var xoff = 50;\n                            var yoff = 50;\n                            var p = 0;\n                            var pixels = [];\n\n                            for (var x = 1; x <= 5; x++) {\n                              for (var y = 1; y <= 5; y++) {\n                                pixels.push(new Pixel(p, xoff * x, yoff * y, data[0][p]));\n                                p++;\n                              }\n                            }\n\n                            var ethb = new Etherbright();\n                            ethb.pixels = pixels; // console.log(\"PIX \",ethb.pixels);\n\n                            ethb.svg = generateSvg(ethb.id, ethb.pixels);\n                            ethb.pallet = data[1];\n                            ethb.id = data[2];\n                            ethb.owner = data[3]; // console.log(\"HISTORY PROM \",data[4])\n                            // ethb.history=getHistory(ethb.id);\n\n                            var pixHist = [];\n                            var _iteratorNormalCompletion = true;\n                            var _didIteratorError = false;\n                            var _iteratorError = undefined;\n\n                            try {\n                              for (var _iterator = data[4][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                                var hist = _step.value;\n                                pixHist.push([hist.returnValues[1].toNumber(), hist.returnValues[2]]);\n                              }\n                            } catch (err) {\n                              _didIteratorError = true;\n                              _iteratorError = err;\n                            } finally {\n                              try {\n                                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                  _iterator.return();\n                                }\n                              } finally {\n                                if (_didIteratorError) {\n                                  throw _iteratorError;\n                                }\n                              }\n                            }\n\n                            ethb.history = pixHist;\n                            ethb.mintPix = data[5]; // console.log(\"SETTING ETHB HISTORY \",ethb.history)\n\n                            _this2.setState({\n                              etherbrights: [].concat(_toConsumableArray(_this2.state.etherbrights), [ethb])\n                            }); // console.log(\"prom data \",data);\n                            // console.log(\"supply \",this.state.totalSupply);\n                            // console.log(\"promis resolved  \", returntotalSupply, \" l=\",this.state.etherbrights.length)\n\n\n                            if (_this2.state.etherbrights.length == returntotalSupply) {\n                              console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! DONE LOADING\");\n\n                              _this2.setState({\n                                loading: false\n                              });\n                            }\n                          }, ethbID);\n\n                        case 32:\n                          i++;\n                          _context3.next = 19;\n                          break;\n\n                        case 35:\n                          _context3.next = 38;\n                          break;\n\n                        case 37:\n                          _this2.setState({\n                            loading: false\n                          }); // console.log(\"END LOOP l=\",this.state.etherbrights.length,\" i=\",i)\n\n\n                        case 38:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                })(), \"t0\", 14);\n\n              case 14:\n                _context4.next = 17;\n                break;\n\n              case 16:\n                window.alert('Smart contract not deployed to detected network.');\n\n              case 17:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"setMethod\",\n    value: function setMethod(newstate) {\n      var _etherbrights = Object.assign(this.state.etherbrights);\n\n      _etherbrights[1].svg = \"<svg width='100' height='100'><circle cx='50' cy='50' r='20' fill='#ffff00' strokeWidth='9' stroke='black'/></svg>\"; // console.log(\"SETSTAT\",_etherbrights)\n\n      this.setState({\n        etherbrights: []\n      });\n      this.setState({\n        etherbrights: _etherbrights\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      if (this.state.loading) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 522\n          },\n          __self: this\n        }, \"LOADING\");\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 525\n          },\n          __self: this\n        }, React.createElement(\"nav\", {\n          className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 526\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          className: \"navbar-brand col-sm-3 col-md-2 mr-0\",\n          href: \"http://www.TheEverbright.com\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 527\n          },\n          __self: this\n        }, \"Etherbright\"), React.createElement(\"ul\", {\n          className: \"navbar-nav px-3\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 535\n          },\n          __self: this\n        }, React.createElement(\"li\", {\n          className: \"nav-item text-nowrap d-none d-sm-none d-sm-block\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 536\n          },\n          __self: this\n        }, React.createElement(\"small\", {\n          className: \"text-white\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 537\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          id: \"account\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 537\n          },\n          __self: this\n        }, this.state.account))))), React.createElement(\"div\", {\n          className: \"container-fluid mt-5\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 541\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 542\n          },\n          __self: this\n        }, React.createElement(\"main\", {\n          role: \"main\",\n          className: \"col-lg-12 d-flex text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 543\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"content mr-auto ml-auto\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 544\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 545\n          },\n          __self: this\n        }, \"setPixelColor\"), React.createElement(\"form\", {\n          onSubmit: function onSubmit(event) {\n            event.preventDefault();\n            var color = _this3.color.value;\n            var n = _this3.n.value;\n\n            _this3.setPixelColor(n, color);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 546\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"text\",\n          className: \"form-control mb-1\",\n          placeholder: \"e.g. #FFFFFF\",\n          ref: function ref(input) {\n            _this3.color = input;\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 552\n          },\n          __self: this\n        }), React.createElement(\"input\", {\n          type: \"text\",\n          className: \"form-control mb-1\",\n          placeholder: \"pixel number\",\n          ref: function ref(input) {\n            _this3.n = input;\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 558\n          },\n          __self: this\n        }), React.createElement(\"input\", {\n          type: \"submit\",\n          className: \"btn btn-block btn-primary\",\n          value: \"SET PIXEL COLOR\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 564\n          },\n          __self: this\n        }))))), React.createElement(\"hr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 573\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          onClick: this.mintEtherbright,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 574\n          },\n          __self: this\n        }, \"mint etherbright\"), React.createElement(\"hr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 575\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          onClick: this.getAllTokenId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 576\n          },\n          __self: this\n        }, \"get all token ID\"), React.createElement(\"hr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 577\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          onClick: this.update,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 578\n          },\n          __self: this\n        }, \"update\"), React.createElement(\"div\", {\n          className: \"row text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 591\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 592\n          },\n          __self: this\n        }, this.state.etherbrights.map(function (ethb) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 594\n            },\n            __self: this\n          }, React.createElement(\"hr\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 595\n            },\n            __self: this\n          }), React.createElement(EthbDisplay, {\n            key: ethb.id,\n            id: ethb.id,\n            owner: ethb.owner,\n            pixels: ethb.pixels,\n            pallet: ethb.pallet,\n            setmethod: function setmethod(id, pixn, paln) {\n              return _this3.setEtherbrightPixelColor(id, pixn, paln);\n            },\n            testsvg: function testsvg(e, id) {\n              return _this3.testsvgonclick(e, id);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 596\n            },\n            __self: this\n          }));\n        })))));\n      }\n    }\n  }]);\n\n  return App;\n}(Component);\n\nvar EthbDisplay = /*#__PURE__*/function (_Component2) {\n  _inherits(EthbDisplay, _Component2);\n\n  function EthbDisplay(props) {\n    var _this4;\n\n    _classCallCheck(this, EthbDisplay);\n\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(EthbDisplay).call(this, props)); // this.testsvgonclick=this.testsvgonclick.bind(this);\n\n    _this4.state = {\n      id: props.id,\n      pixels: props.pixels,\n      owner: props.owner,\n      pallet: props.pallet\n    }; // console.log(\"ETHBDISP ID\",props)\n\n    return _this4;\n  }\n\n  _createClass(EthbDisplay, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(newProps) {\n      this.setState({\n        location: newProps.location\n      });\n    }\n  }, {\n    key: \"getAllColors\",\n    value: function getAllColors() {\n      // console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! \",this.state.pallet);\n      return this.state.pallet;\n    }\n  }, {\n    key: \"getCircle\",\n    value: function getCircle(n, x, y, c) {\n      var _this5 = this;\n\n      return React.createElement(\"circle\", {\n        key: n,\n        id: this.state.id.toHexString(),\n        pn: n,\n        cx: x,\n        cy: y,\n        r: \"20\",\n        fill: c,\n        strokeWidth: \"8\",\n        stroke: \"black\",\n        onClick: function onClick(e) {\n          _this5.props.testsvg(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 637\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      useTick(1, 0);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 644\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        width: \"300\",\n        height: \"300\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 645\n        },\n        __self: this\n      }, this.state.pixels.map(function (pix) {\n        return _this6.getCircle(pix.id, pix.xpos, pix.ypos, pix.color);\n      })), React.createElement(\"div\", {\n        align: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 648\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 649\n        },\n        __self: this\n      }, \"Etherbright id:\"), \" \", React.createElement(\"h6\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 649\n        },\n        __self: this\n      }, \" \", this.state.id.toHexString()), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 650\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 651\n        },\n        __self: this\n      }, \"Etherbright owner:\"), \" \", this.state.owner), React.createElement(CirclePicker, {\n        colors: this.getAllColors(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 653\n        },\n        __self: this\n      }), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 654\n        },\n        __self: this\n      }, \"setPixelColor\"), React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          event.preventDefault();\n          var paln = _this6.paln.value;\n          var pixn = _this6.pixn.value; // const id = this.state.id\n\n          _this6.props.setmethod(_this6.state.id, pixn, paln);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 655\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control mb-1\",\n        placeholder: \"pixel number\",\n        ref: function ref(input) {\n          _this6.pixn = input;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 662\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control mb-1\",\n        placeholder: \"pallent n\",\n        ref: function ref(input) {\n          _this6.paln = input;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 668\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        className: \"btn btn-block btn-primary\",\n        value: \"SET PIXEL COLOR\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 674\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        className: \"button\",\n        onClick: function onClick() {\n          return alert(_this6.state.id);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 680\n        },\n        __self: this\n      }), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 682\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return EthbDisplay;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["H:/Expermental/nft/src/components/App.js"],"names":["React","Component","useState","useEffect","Web3","Color","CirclePicker","Animate","d3","contractAddy","history","gotPastEvents","tickTiming","duration","ease","easeElasticOut","amplitude","period","Etherbright","id","xpos","ypos","pixels","pallet","svg","mode","owner","mintPix","Pixel","color","generateSvg","header","footer","xoff","yoff","p","x","y","c","e","concat","useTick","delay","initialIndex","tick","setTick","interval","setInterval","document","hidden","clearInterval","App","props","mint","state","contract","methods","send","from","account","gas","on","receipt","setState","colors","mintEtherbright","console","log","setPixelColor","n","setPixel","setEtherbrightPixelColor","pixn","paln","setEtherbrightPixel","testsvgonclick","target","getAttributeNS","getAllTokenId","totalSupply","call","then","update","forceUpdate","etherbrights","contractSocket","etherbrightIDs","allSVGs","loading","window","ethereum","web3Socket","providers","WebsocketProvider","web3","enable","alert","loadWeb3","loadBlockchainData","eth","getAccounts","accounts","net","getId","networkId","networkData","networks","abi","address","returnContract","Contract","returnContractSocket","returntotalSupply","toString","events","Selector","event","returnValues","error","EtherbrightPixelChanged","index","length","toHexString","_etherbrights","Object","assign","pixN","EtherbrightMinted","ethb","proms","push","getEtherbrightPallet","getEtherbrightPixels","allProms","Promise","all","data","Transfer","getPastEvents","fromBlock","toBlock","i","tokenByIndex","ethbID","ownerOf","topics","_hex","getEtherbrightMintPixels","pixHist","hist","toNumber","newstate","preventDefault","value","input","map","EthbDisplay","newProps","location","testsvg","pix","getCircle","getAllColors","setmethod"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from 'react';\r\n// import { ReactSVG } from 'react-svg'\r\n// import logo from '../logo.png';\r\nimport './App.css';\r\nimport Web3 from 'web3';\r\nimport Color from '../abis/Color.json'\r\nimport { CirclePicker } from 'react-color';\r\n\r\nimport { Animate } from 'react-move'\r\nimport * as d3 from 'd3'\r\nconst contractAddy=\"0xFaFb7b0B15B240c42D011D2b9779804A847FdF58\";\r\n\r\nvar history=[];\r\nvar gotPastEvents=false;\r\nvar tickTiming = { duration: 800, ease: d3.easeElasticOut.amplitude(1.5).period(1.5) };\r\n\r\n\r\nfunction Etherbright(id, xpos,ypos, pixels, pallet, svg, mode, owner, history, mintPix){\r\n  this.id=id;\r\n  this.owner=owner;\r\n  this.svg=svg;\r\n  this.mode=0;\r\n  this.pixels=pixels;\r\n  this.pallet=pallet;\r\n  this.xpos=xpos;\r\n  this.ypos=ypos;\r\n  this.history=history;\r\n  this.mintPix=mintPix;\r\n\r\n}\r\nfunction Pixel(id,xpos,ypos,color){\r\n  this.id=id;\r\n  this.xpos=xpos;\r\n  this.ypos=ypos;\r\n  this.color=color;\r\n}\r\n\r\n\r\n    \r\n// function  svgonclick(e,id){\r\n//   console.log(\"Color \",e.target.getAttributeNS(null,\"fill\"));\r\n//   console.log(\"ID \",e.target.getAttributeNS(null,\"id\"));\r\n//   window.App.setEtherbrightPixelColor(e.target.getAttributeNS(null,\"id\"),0,0);\r\n\r\n// };\r\n\r\n// function getHistory(id){\r\n//   // console.log(\" GETTING HISTORY for : \",id)\r\n//   // console.log()\r\n//   var pixHist=[];\r\n//   for (const hist of history) {\r\n//       // console.log(\"hist \",hist.returnValues[0]);\r\n\r\n//     if(hist.returnValues[0].toString()==id.toString()){\r\n//     // console.log(\"MATCH\",hist.returnValues[0]);\r\n//       pixHist.push([hist.returnValues[1].toNumber(),hist.returnValues[2]])\r\n//     }\r\n//   }\r\n//   return pixHist;\r\n// }\r\n\r\nfunction generateSvg(id, pixels){\r\n  var header=\"<svg width='300' height='300'>\";\r\n  var footer=\"</svg>\";\r\n  // var body\r\n  var xoff=50;\r\n  var yoff=50;\r\n  var p=0;\r\n  // for(var p=0; p<24; p++){\r\n  //   var c=pixels[p];\r\n  //   var e=\"<circle id={this.state.id.toHexString()} cx='\"+p+\"' cy='50' r='20' fill=\"+c+\" strokeWidth='9' stroke='black' onClick  ={(e) => {this.props.testsvg(e) ;}}/>\";\r\n  //   header=header.concat(e);\r\n  // }\r\n    for(var x=1; x<=5; x++){\r\n      for(var y=1; y<=5; y++){\r\n        // console.log(\"x:\",x,\" y:\",y,\" p:\",p,\" c:\",c);\r\n        var c=pixels[p];\r\n        var e=\"<circle id='\"+id+\"' cx='\"+xoff*x+\"' cy='\"+yoff*y+\"' r='20' fill=\"+c+\" strokeWidth='10' stroke='black' onClick  ='{(e) => {this.props.testsvg(e);}}'/>\";\r\n        header=header.concat(e);\r\n        p++;\r\n      } \r\n    }\r\n  header=header.concat(footer);\r\n  return header;\r\n// console.log(\"generateSVG  \",header)\r\n\r\n}\r\n\r\nfunction useTick(delay, initialIndex) {\r\n  const [tick, setTick] = useState(initialIndex ? initialIndex : 0);\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (!document.hidden) {\r\n        setTick((tick) => tick + 1);\r\n      }\r\n    }, delay);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n  return tick;\r\n}\r\n\r\n\r\nclass App extends Component {\r\n\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state={\r\n      account:'',\r\n      contract: null,\r\n      contractSocket: null,\r\n      totalSupply: 1,\r\n      svg:'', \r\n      colors: [],\r\n      etherbrights: [],\r\n      etherbrightIDs: [],\r\n      allSVGs: [],\r\n      loading:true,\r\n\r\n    }\r\n\r\n  }\r\n\r\n  async loadWeb3() {\r\n\r\n      console.log(\"loadWeb3\");\r\n\r\n    if (window.ethereum) {\r\n            console.log(\"loadWeb3  ETH\");\r\n\r\n      // window.web3 = new Web3(window.ethereum)\r\n            // window.web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8545')) //USED WITH GANACHE CLI\r\n      window.web3Socket = new Web3(new Web3.providers.WebsocketProvider('wss://ropsten.infura.io/ws/v3/4499efec5f8f4aacaf7988bac139d9d3')) //USED WITH GANACHE CLI\r\n      window.web3=new Web3(window.ethereum)//was mm\r\n\r\n      await window.ethereum.enable()\r\n\r\n\r\n\r\n\r\n    }\r\n    else if (window.web3) {\r\n                  console.log(\"loadWeb3  WEB3\");\r\n\r\n      // window.web3 = new Web3(window.web3.currentProvider)\r\n      // window.web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8545'))//USED WITH GANACHE CLI\r\n            window.web3 = new Web3(new Web3.providers.WebsocketProvider('wss://ropsten.infura.io/ws/v3/4499efec5f8f4aacaf7988bac139d9d3'))//USED WITH GANACHE CLI\r\n\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n  }\r\n\r\n  async componentWillMount() {\r\n    console.log(\"loadingWeb3\")\r\n    await this.loadWeb3()\r\n    console.log(\"loadBlockchainData\")\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    const web3Socket = window.web3Socket\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts() //gets accout from metamask\r\n\r\n        // const accounts = await window.mm.eth.getAccounts() //gets accout from metamask\r\n    window.ethereum.on('accountsChanged',  (accounts) =>{\r\n      console.log(\"ACCOUNT CHANGE\")\r\n      this.setState({ account: accounts[0] })//state store property values of a componet and when the state chages the componet re-renders\r\n      })\r\n    console.log(\"account: \",accounts)\r\n    this.setState({ account: accounts[0] })//state store property values of a componet and when the state chages the componet re-renders\r\n    const networkId = await web3.eth.net.getId() //detercts the eth network \r\n    const networkData = Color.networks[networkId] //gets the contracts address on the network\r\n    // console.log(\"netowrkdata\",networkId)\r\n    if(networkData) {//if it has an addres\r\n      const abi = Color.abi //creates a JS version of the contract with its abi\r\n      const address = networkData.address //its actual address?\r\n      // console.log(\"networkData:\",networkData);\r\n      console.log(\"addy\",address);\r\n      // console.log(\"abi:\",abi);\r\n\r\n      // const returnContract = new web3.eth.Contract(abi, address)//creates a new version of this contract\r\n      const returnContract = new web3.eth.Contract(abi,contractAddy)\r\n      this.setState({ contract:returnContract })//sets it in state obj\r\n      // console.log(\"contract:\",this.state.contract)\r\n      const returnContractSocket = new web3Socket.eth.Contract(abi,contractAddy)\r\n      this.setState({contractSocket:returnContractSocket})\r\n            // console.log(\"contractScoket:\",this.state.contract)\r\n\r\n      // console.log(\"calling test return\")\r\n      // const testreturn=returnContract.methods.testReturn(\"this is a test\").call({from: this.state.account})\r\n      // console.log(\"testreturn \",testreturn)\r\n      // console.log(\"calling totalssupply\")\r\n      const returntotalSupply = await returnContract.methods.totalSupply().call()//calls a contracts method\r\n      console.log(\"returntotalsupply\",returntotalSupply.toString())\r\n      this.setState({ totalSupply:returntotalSupply }) //sets state var\r\n      // console.log(\"state total supply\",this.state.totalSupply)\r\n\r\n      // var returnSVG = await returnContract.methods.generateSVG().call()\r\n      // this.setState({svg:returnSVG})\r\n      // const tmp=\"<svg><circle cx=\"50\" cy=\"50\" r=\"20\" fill=\"#ff0000\" stroke-width=\"9\" stroke=\"black\"/></svg>\"\r\n\r\n      // this.setState({svg:\"<svg width='100' height='100'><circle cx='50' cy='50' r='20' fill='#ffff00' stroke-width='9' stroke='black'/></svg>\"})\r\n      // console.log(\"SVG: \",this.state.svg)\r\n\r\n      returnContractSocket.events.Selector()\r\n      .on('data', (event) => {\r\n        console.log(\"SELECTOR: \",event.returnValues[0]);\r\n      })\r\n      .on('error', console.error)\r\n\r\n      // returnContract.events.SVGgenerated()\r\n      // .on('data', (event) => {\r\n      //   console.log(\"SVG EVENT \",event);\r\n      //   this.setState({svg:event.returnValues[0]})\r\n      // })\r\n      // .on('error', console.error)\r\n\r\n      // returnContract.events.EtherbrightSVGgenerated()\r\n      // .on('data', (event) => {\r\n      //   console.log(\"ETHB SVG EVENT \",event);\r\n      //   // this.setState({svg:event.returnValues[0]})\r\n      // })\r\n      // .on('error', console.error)\r\n\r\n      returnContractSocket.events.EtherbrightPixelChanged()\r\n      .on('data', (event) => {\r\n        console.log(\"ETHB PIXEL CHANGED EVENT \",event);\r\n          // returnContract.methods.generateEtherbrightsSVG(event.returnValues[0]).call()\r\n          //   .then(function(result){console.log(result)})\r\n\r\n        for (var index = 0; index < this.state.etherbrights.length; index++) {\r\n            console.log(\"index \",index);\r\n            console.log(\"state ID \",this.state.etherbrights[index].id.toHexString());\r\n            console.log(\"token id \",event.returnValues[0].toHexString());\r\n          if (this.state.etherbrights[index].id.toHexString() === event.returnValues[0].toHexString()) {\r\n            console.log(\"THIS IS IT\")\r\n\r\n            break;\r\n          }\r\n        }\r\n        // console.log(\"etherbrights: \",this.state.etherbrights );\r\n\r\n        var _etherbrights = Object.assign(this.state.etherbrights);\r\n                // console.log(\"_etherbrights \",_etherbrights );\r\n\r\n        // var tmp;\r\n        var pixN=event.returnValues[1];\r\n        _etherbrights[index].pixels[pixN].color=event.returnValues[3];\r\n\r\n        this.setState({etherbrights  :[] });\r\n          this.setState({etherbrights:_etherbrights });\r\n\r\n              // this.setMethod(_etherbrights);\r\n\r\n\r\n\r\n        // this.state.etherbrights.map(ethb =>{\r\n        //   if(ethb.id=event.returnValues[0]){\r\n\r\n        //     // console.log(\"THIS IS IT\", index);\r\n        //     var returnSVG =  returnContract.methods.generateEtherbrightsSVG(event.returnValues[0]).call()\r\n        //     // this.setState()\r\n        //     // let tmparray=this.state.etherbrights.slice();\r\n        //     // tmparray[id][svg]=returnSVG;\r\n        //     // setarray(tmparray);\r\n\r\n        //   }\r\n\r\n        //   }\r\n        //   )\r\n\r\n      })\r\n      .on('error', console.error)\r\n\r\n      // returnContract.events.PixelChanged()\r\n      // .on('data', (event) => {\r\n      //   console.log(\"PIXEL CHANGED EVENT \",event.returnValues[0]);\r\n\r\n      // })\r\n      // .on('error', console.error)\r\n\r\n\r\n\r\n      // returnContract.events.EtherbrightMinted()\r\n      // .on('data', (event) => {\r\n      //   console.log(\"Etherbright Minted \",event);\r\n      //     var ethb=new Etherbright(event.returnValues[0],event.returnValues[1]);\r\n      //   this.setState({\r\n      //     etherbrights: [...this.state.etherbrights, ethb]\r\n      //   })\r\n      // })\r\n      // .on('error', console.error)\r\n      returnContractSocket.events.EtherbrightMinted()\r\n      .on('data', (event) => {\r\n        console.log(\"Etherbright Minted \",event);\r\n          var id=event.returnValues[0];\r\n          var owner=event.returnValues[1];\r\n          console.log(\" minted id \",id)\r\n\r\n          // var pixels=[];\r\n          // var svg=\"tmp\";\r\n          // var waiting=1;\r\n          var ethb=new Etherbright(); \r\n          ethb.id=id;\r\n          ethb.owner=owner;\r\n          var proms=[];\r\n          // var pixelColors=[];\r\n          // returnContract.methods.getEtherbrightPallet(id).call().then(function(result){ethb.pallet=result;console.log(\"PALLET \",result)});\r\n          // returnContract.methods.getEtherbrightPixels(id).call().then(function(result){pixelColors=result;console.log(\"PALLET \",result)});\r\n          proms.push(returnContractSocket.methods.getEtherbrightPallet(id).call());\r\n          proms.push(returnContractSocket.methods.getEtherbrightPixels(id).call());\r\n          var allProms=Promise.all(proms);\r\n            allProms.then((data) => {\r\n              // console.log(\"DATA 0\",data[0])\r\n              ethb.pallet=data[0];\r\n              // console.log(\"ethb.pallet \",ethb.pallet)\r\n\r\n              // console.log(\"ALL PROMS ID \",ethb.id); \r\n                var xoff=50;\r\n               var yoff=50;\r\n                var p=0;\r\n                var pixels=[];\r\n                for(var x=1; x<=5; x++){\r\n                  for(var y=1; y<=5; y++){\r\n                    pixels.push(new Pixel(p,xoff*x,yoff*y,data[1][p]))\r\n                    p++;\r\n                  }\r\n                }\r\n              ethb.pixels=pixels;\r\n\r\n              // console.log(\"PIX \",ethb.pixels);\r\n              // console.log(\"PALLET \",ethb.pallet);\r\n\r\n              // ethb.svg=generateSvg(ethb.id,ethb.pixels);\r\n              this.setState({\r\n              etherbrights: [...this.state.etherbrights, ethb]\r\n              })\r\n            })  \r\n      })\r\n      .on('error', console.error)\r\n\r\n\r\n\r\n\r\n      returnContractSocket.events.Transfer()\r\n      .on('data', (event) =>{console.log(\"GOT EVENT\");console.log(event);})\r\n      .on('error',console.error);\r\n\r\n      returnContractSocket.getPastEvents('EtherbrightPixelChanged', {fromBlock: 0,toBlock: 'latest'},\r\n      (error, events)=>{  history=events; console.log(\"PixelChangeHistory=\",history); gotPastEvents=true; })\r\n      .then((events)=>{\r\n      });\r\n\r\n\r\n      // returnContract.getPastEvents('SVGgenerated', {\r\n      //     fromBlock: 0,\r\n      //     toBlock: 'latest'\r\n      // }, function(error, events){ \r\n      //     console.log(events); \r\n      //     // returnSVG= returnContract.methods.generateSVG().call();\r\n      //     // this.setState({svg:returnSVG});\r\n\r\n      //    })\r\n      // .then(function(events){\r\n      //     console.log(events) // same results as the optional callback above\r\n      // });\r\n\r\n\r\n\r\n      // Load Colors\r\n      // for (var i = 1; i <= returntotalSupply; i++) {\r\n      //   const color = await returnContract.methods.colors(i - 1).call()\r\n      //   this.setState({\r\n      //     colors: [...this.state.colors, color]\r\n      //   })\r\n      // }\r\n      // var _svgmap = new Map();\r\n      if(returntotalSupply>0){\r\n          for (var i = 0; i < returntotalSupply; i++) {\r\n            var ethbID = await returnContract.methods.tokenByIndex(i).call()\r\n            var proms=[];\r\n            proms.push(returnContract.methods.getEtherbrightPixels(ethbID).call());\r\n            proms.push(returnContract.methods.getEtherbrightPallet(ethbID).call());\r\n            proms.push(returnContract.methods.tokenByIndex(i).call());\r\n            proms.push(returnContract.methods.ownerOf(ethbID).call());\r\n            proms.push(returnContractSocket.getPastEvents('EtherbrightPixelChanged', {fromBlock: 0,toBlock: 'latest',topics: [ethbID._hex]}))\r\n            proms.push(returnContract.methods.getEtherbrightMintPixels(ethbID).call())\r\n            var allProms=Promise.all(proms);\r\n                allProms.then((data) => {\r\n\r\n                  // console.log(\" startup ALL PROMS ID =\",ethbID.toString()); \r\n                    var xoff=50;\r\n                    var yoff=50;\r\n                    var p=0;\r\n                    var pixels=[];\r\n                    for(var x=1; x<=5; x++){\r\n                      for(var y=1; y<=5; y++){\r\n                        pixels.push(new Pixel(p,xoff*x,yoff*y,data[0][p]))\r\n                        p++;\r\n                      }\r\n                    }\r\n                  const ethb=new Etherbright();\r\n\r\n                  ethb.pixels=pixels;\r\n                  // console.log(\"PIX \",ethb.pixels);\r\n                  ethb.svg=generateSvg(ethb.id,ethb.pixels);\r\n                 \r\n                  ethb.pallet=data[1];\r\n                  ethb.id=data[2];\r\n                  ethb.owner=data[3];\r\n                  // console.log(\"HISTORY PROM \",data[4])\r\n                  // ethb.history=getHistory(ethb.id);\r\n                  var pixHist=[];\r\n                  for(var hist of data[4]){\r\n                    pixHist.push([hist.returnValues[1].toNumber(),hist.returnValues[2]])\r\n                  }\r\n                  ethb.history=pixHist\r\n                  ethb.mintPix=data[5]\r\n                  // console.log(\"SETTING ETHB HISTORY \",ethb.history)\r\n                  this.setState({\r\n                    etherbrights: [...this.state.etherbrights, ethb]\r\n                  })\r\n                  // console.log(\"prom data \",data);\r\n                  // console.log(\"supply \",this.state.totalSupply);\r\n\r\n                  // console.log(\"promis resolved  \", returntotalSupply, \" l=\",this.state.etherbrights.length)\r\n                  if(this.state.etherbrights.length==returntotalSupply ){\r\n                 \r\n                    console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! DONE LOADING\")\r\n                        this.setState({loading:false})\r\n                      }\r\n\r\n                },ethbID)\r\n          }\r\n      }else{\r\n        this.setState({loading:false})\r\n        // console.log(\"END LOOP l=\",this.state.etherbrights.length,\" i=\",i)\r\n      }\r\n//       while(this.state.etherbrights.length<i-1){\r\n//   console.log(\"loading\")\r\n// }\r\n// this.setState({loading:false});\r\n      // this.setState({SVGmap:_svgmap})\r\n      // console.log(\"allsvgs\",this.state.allSVGs)\r\n      // console.log(\"MAP\", this.state.svgmap)\r\n    } else {\r\n      window.alert('Smart contract not deployed to detected network.')\r\n    }\r\n  }\r\n\r\n\r\n\r\nmint = (color) => {\r\n  this.state.contract.methods.mint(color)\r\n  .send({from: this.state.account, gas:3000000 })//gas must be set with each call for Ganche-cli\r\n  .on('receipt',\r\n     (receipt) => {\r\n      // console.log(\"got mints receipt\")\r\n        this.setState(\r\n          {\r\n          colors: [...this.state.colors, color]\r\n          }\r\n        )\r\n      }\r\n  )\r\n}\r\n setMethod(newstate){\r\n   var _etherbrights = Object.assign(this.state.etherbrights);\r\n          _etherbrights[1].svg=\"<svg width='100' height='100'><circle cx='50' cy='50' r='20' fill='#ffff00' strokeWidth='9' stroke='black'/></svg>\";\r\n                  // console.log(\"SETSTAT\",_etherbrights)\r\n\r\n  this.setState({etherbrights  :[] });\r\n  this.setState({etherbrights:_etherbrights });\r\n\r\n}\r\nmintEtherbright = ()=>{\r\n  console.log(\"MINTETHERBRIGHT account: \",this.state.account)\r\n  this.state.contract.methods.mintEtherbright(this.state.account)\r\n  .send({from: this.state.account })\r\n}\r\n\r\n\r\nsetPixelColor = (n, color) =>{\r\n  this.state.contract.methods.setPixel(n, color)\r\n  .send({from: this.state.account})\r\n\r\n}\r\n\r\nsetEtherbrightPixelColor = (id, pixn, paln) => {\r\n  console.log(\"setEtherbrightPixelColor: \",id,\" \",pixn,\" \",paln)\r\n  this.state.contract.methods.setEtherbrightPixel(id, pixn, paln)\r\n  .send({from: this.state.account})\r\n}\r\n\r\ntestsvgonclick=(e,id)=>{\r\n  console.log(\"Pix N \",e.target.getAttributeNS(null,\"pn\"))\r\n  console.log(\"Color \",e.target.getAttributeNS(null,\"fill\"))\r\n  console.log(\"ID \",e.target.getAttributeNS(null,\"id\"))\r\n  // window.App.setEtherbrightPixelColor(e.target.getAttributeNS(null,\"id\"),0,0)\r\n\r\n}\r\ngetAllTokenId = ()=>{\r\n  this.state.contract.methods.totalSupply().call()\r\n  .then(\r\n      function(totalSupply){\r\n        console.log(\"Total Supply with a promise:\",  totalSupply);\r\n      }\r\n      )\r\n}\r\n\r\nupdate=()=>{this.forceUpdate();\r\nconsole.log(this.state.etherbrights)}\r\n\r\nrender() {\r\n  if(this.state.loading){\r\n     return (<div>LOADING</div>)\r\n  }else{\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n          <a\r\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\r\n            href=\"http://www.TheEverbright.com\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Etherbright\r\n          </a>\r\n          <ul className=\"navbar-nav px-3\">\r\n            <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\r\n              <small className=\"text-white\"><span id=\"account\">{this.state.account}</span></small>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <div className=\"container-fluid mt-5\">\r\n          <div className=\"row\">\r\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\r\n              <div className=\"content mr-auto ml-auto\">\r\n                <h1>setPixelColor</h1>\r\n                <form onSubmit={(event) => {\r\n                  event.preventDefault()\r\n                  const color = this.color.value\r\n                  const n = this.n.value\r\n                  this.setPixelColor(n,color)\r\n                }}>\r\n                  <input\r\n                    type='text'\r\n                    className='form-control mb-1'\r\n                    placeholder='e.g. #FFFFFF'\r\n                    ref={(input) => { this.color = input }}\r\n                  />\r\n                  <input\r\n                    type='text'\r\n                    className='form-control mb-1'\r\n                    placeholder='pixel number'\r\n                    ref={(input) => { this.n = input }}\r\n                  />\r\n                  <input\r\n                    type='submit'\r\n                    className='btn btn-block btn-primary'\r\n                    value='SET PIXEL COLOR'\r\n                  />\r\n                </form>\r\n              </div>\r\n            </main>\r\n          </div>\r\n            <hr/>\r\n            <button onClick={this.mintEtherbright}>mint etherbright</button>\r\n            <hr/>\r\n            <button onClick={this.getAllTokenId}>get all token ID</button>\r\n             <hr/>\r\n            <button onClick={this.update}>update</button>\r\n            {/*\r\n            <hr/>\r\n            <h1>JUNK</h1>\r\n            <div dangerouslySetInnerHTML={{__html: this.state.svg }} />\r\n            <hr/>\r\n            <div dangerouslySetInnerHTML={{__html: this.state.allSVGs }} />\r\n            <h1>more 2JUNK</h1>\r\n              <svg width='100' height='100'>\r\n              <circle cx='50' cy='50' r='20' fill='#ffff00' strokeWidth='9' stroke='black'/>\r\n              </svg>\r\n            <hr/>\r\n          */}\r\n          <div className=\"row text-center\">\r\n            <div>\r\n              {this.state.etherbrights.map(ethb => (\r\n                <div >\r\n                <hr/>\r\n                  <EthbDisplay key={ethb.id} id={ethb.id} owner={ethb.owner} pixels={ethb.pixels} pallet={ethb.pallet} setmethod={(id,pixn,paln)=>this.setEtherbrightPixelColor(id,pixn,paln)} testsvg={(e,id)=>this.testsvgonclick(e,id)}/>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n }\r\n}\r\n\r\nclass EthbDisplay extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    // this.testsvgonclick=this.testsvgonclick.bind(this);\r\n    this.state={\r\n      id: props.id,\r\n      pixels: props.pixels,\r\n      owner: props.owner,\r\n      pallet: props.pallet,\r\n    };\r\n    // console.log(\"ETHBDISP ID\",props)\r\n  }\r\n  componentWillReceiveProps(newProps){\r\n      this.setState({\r\n          location: newProps.location\r\n      })\r\n\r\n  }\r\n  getAllColors(){\r\n    // console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! \",this.state.pallet);\r\n    return(\r\n      this.state.pallet\r\n      )\r\n    \r\n  }\r\n\r\n  getCircle(n,x,y,c){\r\n\r\n    return(\r\n      <circle key={n} id={this.state.id.toHexString()} pn={n} cx={x} cy={y} r='20' fill={c} strokeWidth='8' stroke='black' onClick  ={(e) => {this.props.testsvg(e);}}/>\r\n    )\r\n  }\r\n  render(){\r\n                   useTick(1, 0)\r\n\r\n    return(\r\n      <div >\r\n        <svg width='300' height='300'>\r\n          {this.state.pixels.map(pix=>(this.getCircle(pix.id, pix.xpos, pix.ypos, pix.color) ))}\r\n        </svg>\r\n        <div align=\"left\">\r\n          <h5>Etherbright id:</h5> <h6> {this.state.id.toHexString()}</h6>\r\n          <br/>\r\n          <h5>Etherbright owner:</h5> {this.state.owner}\r\n        </div>  \r\n        <CirclePicker colors={this.getAllColors()}/>\r\n        <h3>setPixelColor</h3>\r\n        <form onSubmit={(event) => {\r\n          event.preventDefault()\r\n          const paln = this.paln.value\r\n          const pixn = this.pixn.value\r\n          // const id = this.state.id\r\n          this.props.setmethod(this.state.id,pixn,paln)\r\n        }}>\r\n          <input\r\n            type='text'\r\n            className='form-control mb-1'\r\n            placeholder='pixel number'\r\n            ref={(input) => { this.pixn = input }}\r\n          />\r\n          <input\r\n            type='text'\r\n            className='form-control mb-1'\r\n            placeholder='pallent n'\r\n            ref={(input) => { this.paln = input }}\r\n          />\r\n          <input\r\n            type='submit'\r\n            className='btn btn-block btn-primary'\r\n            value='SET PIXEL COLOR'\r\n          />\r\n        </form>\r\n        <button className=\"button\" onClick={() => alert(this.state.id)}>\r\n        </button>\r\n        <hr/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}