{"version":3,"file":"react-svg.cjs.production.js","sources":["../compiled/shallow-differs.js","../compiled/ReactSVG.js"],"sourcesContent":["// Hat-tip: https://github.com/developit/preact-compat/blob/master/src/index.js#L402.\nconst shallowDiffers = (a, b) => {\n    for (const i in a) {\n        if (!(i in b)) {\n            return true;\n        }\n    }\n    for (const i in b) {\n        if (a[i] !== b[i]) {\n            return true;\n        }\n    }\n    return false;\n};\nexport default shallowDiffers;\n","import { SVGInjector } from '@tanem/svg-injector';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport shallowDiffers from './shallow-differs';\nconst svgNamespace = 'http://www.w3.org/2000/svg';\nconst xlinkNamespace = 'http://www.w3.org/1999/xlink';\nexport class ReactSVG extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.initialState = {\n            hasError: false,\n            isLoading: true,\n        };\n        this.state = this.initialState;\n        this._isMounted = false;\n        this.refCallback = (container) => {\n            this.container = container;\n        };\n    }\n    renderSVG() {\n        /* istanbul ignore else */\n        if (this.container instanceof Node) {\n            const { beforeInjection, evalScripts, renumerateIRIElements, src, useRequestCache, } = this.props;\n            /* eslint-disable @typescript-eslint/no-non-null-assertion */\n            const afterInjection = this.props.afterInjection;\n            const wrapper = this.props.wrapper;\n            /* eslint-enable @typescript-eslint/no-non-null-assertion */\n            let nonReactElement;\n            if (wrapper === 'svg') {\n                nonReactElement = document.createElementNS(svgNamespace, wrapper);\n                nonReactElement.setAttribute('xmlns', svgNamespace);\n                nonReactElement.setAttribute('xmlns:xlink', xlinkNamespace);\n            }\n            else {\n                nonReactElement = document.createElement(wrapper);\n            }\n            nonReactElement.dataset.src = src;\n            this.nonReactElement = this.container.appendChild(nonReactElement);\n            const afterEach = (error, svg) => {\n                if (error) {\n                    this.removeSVG();\n                    if (!this._isMounted) {\n                        afterInjection(error);\n                        return;\n                    }\n                }\n                this.nonReactElement = svg;\n                // TODO (Tane): It'd be better to cleanly unsubscribe from SVGInjector\n                // callbacks instead of tracking a property like this.\n                if (this._isMounted) {\n                    this.setState(() => ({\n                        hasError: !!error,\n                        isLoading: false,\n                    }), () => {\n                        afterInjection(error, svg);\n                    });\n                }\n            };\n            SVGInjector(nonReactElement, {\n                afterEach,\n                beforeEach: beforeInjection,\n                cacheRequests: useRequestCache,\n                evalScripts,\n                renumerateIRIElements,\n            });\n        }\n    }\n    removeSVG() {\n        if (this.container instanceof Node &&\n            this.nonReactElement instanceof Node) {\n            this.container.removeChild(this.nonReactElement);\n            this.nonReactElement = null;\n        }\n    }\n    componentDidMount() {\n        this._isMounted = true;\n        this.renderSVG();\n    }\n    componentDidUpdate(prevProps) {\n        if (shallowDiffers(prevProps, this.props)) {\n            this.setState(() => this.initialState, () => {\n                this.removeSVG();\n                this.renderSVG();\n            });\n        }\n    }\n    componentWillUnmount() {\n        this._isMounted = false;\n        this.removeSVG();\n    }\n    render() {\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        const { afterInjection, beforeInjection, evalScripts, fallback: Fallback, loading: Loading, renumerateIRIElements, src, useRequestCache, wrapper, ...rest } = this.props;\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const Wrapper = wrapper;\n        return (React.createElement(Wrapper, Object.assign({}, rest, { ref: this.refCallback }, (wrapper === 'svg'\n            ? {\n                xmlns: svgNamespace,\n                xmlnsXlink: xlinkNamespace,\n            }\n            : {})),\n            this.state.isLoading && Loading && React.createElement(Loading, null),\n            this.state.hasError && Fallback && React.createElement(Fallback, null)));\n    }\n}\nReactSVG.defaultProps = {\n    afterInjection: () => undefined,\n    beforeInjection: () => undefined,\n    evalScripts: 'never',\n    fallback: null,\n    loading: null,\n    renumerateIRIElements: true,\n    useRequestCache: true,\n    wrapper: 'div',\n};\nReactSVG.propTypes = {\n    afterInjection: PropTypes.func,\n    beforeInjection: PropTypes.func,\n    evalScripts: PropTypes.oneOf(['always', 'once', 'never']),\n    fallback: PropTypes.oneOfType([\n        PropTypes.func,\n        PropTypes.object,\n        PropTypes.string,\n    ]),\n    loading: PropTypes.oneOfType([\n        PropTypes.func,\n        PropTypes.object,\n        PropTypes.string,\n    ]),\n    renumerateIRIElements: PropTypes.bool,\n    src: PropTypes.string.isRequired,\n    useRequestCache: PropTypes.bool,\n    wrapper: PropTypes.oneOf(['div', 'span', 'svg']),\n};\n"],"names":["shallowDiffers","a","b","i","svgNamespace","xlinkNamespace","ReactSVG","arguments","initialState","hasError","isLoading","state","_this","_isMounted","refCallback","container","renderSVG","this","Node","nonReactElement","props","beforeInjection","evalScripts","renumerateIRIElements","src","useRequestCache","afterInjection","wrapper","document","createElementNS","setAttribute","createElement","dataset","appendChild","SVGInjector","afterEach","error","svg","_this2","removeSVG","setState","beforeEach","cacheRequests","removeChild","componentDidMount","componentDidUpdate","prevProps","_this3","componentWillUnmount","render","Fallback","fallback","Loading","loading","rest","React","Object","assign","ref","xmlns","xmlnsXlink","defaultProps"],"mappings":"giBACMA,eAAiB,SAACC,EAAGC,OAClB,IAAMC,KAAKF,OACNE,KAAKD,UACA,MAGV,IAAMC,KAAKD,KACRD,EAAEE,KAAOD,EAAEC,UACJ,SAGR,GCRLC,aAAe,6BACfC,eAAiB,+BACVC,8DAEIC,kBACJC,aAAe,CAChBC,UAAU,EACVC,WAAW,KAEVC,MAAQC,EAAKJ,eACbK,YAAa,IACbC,YAAc,SAACC,KACXA,UAAYA,qEAGzBC,UAAA,yBAEQC,KAAKF,qBAAqBG,KAAM,KAM5BC,IALmFF,KAAKG,MAApFC,IAAAA,gBAAiBC,IAAAA,YAAaC,IAAAA,sBAAuBC,IAAAA,IAAKC,IAAAA,gBAE5DC,EAAiBT,KAAKG,MAAMM,eAC5BC,EAAUV,KAAKG,MAAMO,QAGX,QAAZA,IACAR,EAAkBS,SAASC,gBAAgBzB,aAAcuB,IACzCG,aAAa,QAAS1B,cACtCe,EAAgBW,aAAa,cAAezB,iBAG5Cc,EAAkBS,SAASG,cAAcJ,GAE7CR,EAAgBa,QAAQR,IAAMA,OACzBL,gBAAkBF,KAAKF,UAAUkB,YAAYd,GAqBlDe,wBAAYf,EAAiB,CACzBgB,UArBc,SAACC,EAAOC,IAClBD,IACAE,EAAKC,YACAD,EAAKzB,aAKdyB,EAAKnB,gBAAkBkB,EAGnBC,EAAKzB,YACLyB,EAAKE,UAAS,iBAAO,CACjB/B,WAAY2B,EACZ1B,WAAW,MACX,WACAgB,EAAeU,EAAOC,OAZtBX,EAAeU,IAkBvBK,WAAYpB,EACZqB,cAAejB,EACfH,YAAAA,EACAC,sBAAAA,QAIZgB,UAAA,WACQtB,KAAKF,qBAAqBG,MAC1BD,KAAKE,2BAA2BD,YAC3BH,UAAU4B,YAAY1B,KAAKE,sBAC3BA,gBAAkB,SAG/ByB,kBAAA,gBACS/B,YAAa,OACbG,eAET6B,mBAAA,SAAmBC,cACX9C,eAAe8C,EAAW7B,KAAKG,aAC1BoB,UAAS,kBAAMO,EAAKvC,gBAAc,WACnCuC,EAAKR,YACLQ,EAAK/B,kBAIjBgC,qBAAA,gBACSnC,YAAa,OACb0B,eAETU,OAAA,iBAEkKhC,KAAKG,MAAnG8B,IAAVC,SAA6BC,IAATC,QAA+D1B,IAAAA,QAAY2B,6LAI7IC,oBADQ5B,EACqB6B,OAAOC,OAAO,GAAIH,EAAM,CAAEI,IAAKzC,KAAKH,aAA4B,QAAZa,EACnF,CACEgC,MAAOvD,aACPwD,WAAYvD,gBAEd,IACFY,KAAKN,MAAMD,WAAa0C,GAAWG,oBAAoBH,EAAS,MAChEnC,KAAKN,MAAMF,UAAYyC,GAAYK,oBAAoBL,EAAU,WAjG/CK,iBAoG9BjD,SAASuD,aAAe,CACpBnC,eAAgB,aAChBL,gBAAiB,aACjBC,YAAa,QACb6B,SAAU,KACVE,QAAS,KACT9B,uBAAuB,EACvBE,iBAAiB,EACjBE,QAAS"}